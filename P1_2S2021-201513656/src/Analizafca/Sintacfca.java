
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 05 20:48:14 CST 2021
//----------------------------------------------------

package Analizafca;

import Analizadores.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 05 20:48:14 CST 2021
  */
public class Sintacfca extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintacfca() {super();}

  /** Constructor which sets the default scanner. */
  public Sintacfca(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacfca(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\004\000\002" +
    "\005\004\000\002\005\003\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\006\004\000\002\010\005" +
    "\000\002\010\007\000\002\007\004\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\006\003\004\041\006\001\002\000\004\024" +
    "\067\001\002\000\004\002\066\001\002\000\004\023\007" +
    "\001\002\000\016\003\013\004\017\005\015\006\012\007" +
    "\014\024\010\001\002\000\004\002\000\001\002\000\004" +
    "\024\065\001\002\000\004\023\063\001\002\000\004\024" +
    "\062\001\002\000\004\023\060\001\002\000\004\023\056" +
    "\001\002\000\016\003\013\004\017\005\015\006\012\007" +
    "\014\024\ufffc\001\002\000\004\023\020\001\002\000\012" +
    "\003\025\011\023\012\024\024\021\001\002\000\016\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\024\ufffb\001\002" +
    "\000\012\003\025\011\023\012\024\024\ufff4\001\002\000" +
    "\004\037\050\001\002\000\004\037\031\001\002\000\004" +
    "\031\030\001\002\000\004\024\027\001\002\000\016\003" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\024\ufff7\001\002" +
    "\000\012\003\ufff0\011\ufff0\012\ufff0\024\ufff0\001\002\000" +
    "\004\027\032\001\002\000\006\030\035\036\033\001\002" +
    "\000\004\031\047\001\002\000\004\031\046\001\002\000" +
    "\004\023\036\001\002\000\006\024\037\037\040\001\002" +
    "\000\004\031\uffef\001\002\000\004\033\041\001\002\000" +
    "\004\035\044\001\002\000\004\024\043\001\002\000\004" +
    "\031\uffee\001\002\000\006\024\uffed\033\041\001\002\000" +
    "\004\024\uffec\001\002\000\012\003\ufff1\011\ufff1\012\ufff1" +
    "\024\ufff1\001\002\000\012\003\ufff2\011\ufff2\012\ufff2\024" +
    "\ufff2\001\002\000\004\027\051\001\002\000\004\035\052" +
    "\001\002\000\004\031\053\001\002\000\012\003\ufff3\011" +
    "\ufff3\012\ufff3\024\ufff3\001\002\000\004\024\ufff5\001\002" +
    "\000\004\024\ufffd\001\002\000\004\024\057\001\002\000" +
    "\016\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\024\ufffa" +
    "\001\002\000\004\024\061\001\002\000\016\003\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\024\ufff8\001\002\000\016" +
    "\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\024\ufff6\001" +
    "\002\000\004\024\064\001\002\000\016\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\024\ufff9\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\010\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\054\004\015\001\001\000\002\001\001\000" +
    "\006\005\025\006\021\001\001\000\002\001\001\000\006" +
    "\005\053\006\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacfca$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacfca$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacfca$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        int linea = s.right+1;
        int columna = s.left;
        String encontrado = s.value.toString();

        System.out.println(encontrado);
        FVentanaP.AddES(encontrado, "Sintactico", "archivo",linea,columna);//Lista de Reporte
    }

    public Symbol getS(){
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("MODO PANICO");

        int linea = s.right;
        int columna = s.left;
        String encontrado = s.value.toString();
        FVentanaP.AddES(encontrado, "Sintactico Panico", "archivo",linea,columna);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintacfca$actions {
  private final Sintacfca parser;

  /** Constructor */
  CUP$Sintacfca$actions(Sintacfca parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintacfca$do_action(
    int                        CUP$Sintacfca$act_num,
    java_cup.runtime.lr_parser CUP$Sintacfca$parser,
    java.util.Stack            CUP$Sintacfca$stack,
    int                        CUP$Sintacfca$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacfca$result;

      /* select the action based on the action number */
      switch (CUP$Sintacfca$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLEBARRA ::= Coma Cadena VARIABLEBARRA 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VARIABLEBARRA",5, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLEBARRA ::= Coma Cadena 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VARIABLEBARRA",5, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOBARRA ::= Dolar LlaveA Identificador VARIABLEBARRA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("TIPOBARRA",6, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOBARRA ::= Dolar LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("TIPOBARRA",6, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DGLOBALE ::= error PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DGLOBALE ::= Double Identificador Igual TIPOBARRA PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DGLOBALE ::= Double Identificador Igual Numero PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DGLOBALE ::= String Identificador Igual Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DGLOBALES ::= DGLOBALE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALES",3, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DGLOBALES ::= DGLOBALE DGLOBALES 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALES",3, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSESTADISTICO ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSESTADISTICO ::= Globales LlaveA DGLOBALES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSESTADISTICO ::= GPie LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSESTADISTICO ::= GLineas LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSESTADISTICO ::= GBarras LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSESTADISTICO ::= Globales LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSESTADISTICOS ::= INSESTADISTICO 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICOS",1, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSESTADISTICOS ::= INSESTADISTICO INSESTADISTICOS 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICOS",1, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= REstadisticos LlaveA INSESTADISTICOS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REstadisticos LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)).value;
		RESULT = start_val;
              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacfca$parser.done_parsing();
          return CUP$Sintacfca$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

