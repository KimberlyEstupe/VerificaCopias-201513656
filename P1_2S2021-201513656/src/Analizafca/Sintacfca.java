
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 05 22:46:19 CST 2021
//----------------------------------------------------

package Analizafca;

import Analizadores.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 05 22:46:19 CST 2021
  */
public class Sintacfca extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintacfca() {super();}

  /** Constructor which sets the default scanner. */
  public Sintacfca(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacfca(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\003\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\006\004\000" +
    "\002\011\004\000\002\011\003\000\002\015\003\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\004\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\012\003\000\002\014\004\000" +
    "\002\014\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\010\005\000\002\010\007\000\002\007\004" +
    "\000\002\007\005\000\002\017\004\000\002\017\003\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\003\000\002\016\004\000\002\020" +
    "\004\000\002\020\003\000\002\021\003\000\002\022\006" +
    "\000\002\022\006\000\002\022\007\000\002\022\010\000" +
    "\002\022\007\000\002\022\010\000\002\022\003\000\002" +
    "\023\006\000\002\023\007\000\002\023\011\000\002\023" +
    "\007\000\002\023\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\003\004\041\006\001\002\000\004\024" +
    "\233\001\002\000\004\002\232\001\002\000\004\023\007" +
    "\001\002\000\020\003\017\004\013\005\016\006\011\007" +
    "\021\010\020\024\012\001\002\000\004\024\231\001\002" +
    "\000\004\023\204\001\002\000\004\002\000\001\002\000" +
    "\004\023\160\001\002\000\020\003\017\004\013\005\016" +
    "\006\011\007\021\010\020\024\ufffc\001\002\000\020\003" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\024\ufff3" +
    "\001\002\000\004\023\132\001\002\000\004\024\131\001" +
    "\002\000\004\021\110\001\002\000\004\023\022\001\002" +
    "\000\014\010\020\013\023\014\030\015\032\024\026\001" +
    "\002\000\004\034\073\001\002\000\014\010\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\024\uffc9\001\002\000\014\010\020\013" +
    "\023\014\030\015\032\024\uffca\001\002\000\020\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\024\ufff8\001" +
    "\002\000\004\024\071\001\002\000\004\034\064\001\002" +
    "\000\022\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\024\uffc2\001\002\000\004\034\033\001\002" +
    "\000\004\025\034\001\002\000\014\026\043\030\042\033" +
    "\036\035\044\037\041\001\002\000\014\026\uffdb\030\uffdb" +
    "\033\uffdb\035\uffdb\037\uffdb\001\002\000\010\030\042\035" +
    "\063\037\062\001\002\000\004\026\057\001\002\000\014" +
    "\026\uffde\030\042\033\036\035\044\037\041\001\002\000" +
    "\014\026\uffdd\030\uffdd\033\uffdd\035\uffdd\037\uffdd\001\002" +
    "\000\004\023\046\001\002\000\004\031\045\001\002\000" +
    "\014\026\uffdc\030\uffdc\033\uffdc\035\uffdc\037\uffdc\001\002" +
    "\000\022\003\uffc4\010\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\024\uffc4\001\002\000\006\024\047\037\050" +
    "\001\002\000\016\026\uffd7\030\uffd7\031\uffd7\033\uffd7\035" +
    "\uffd7\037\uffd7\001\002\000\004\033\051\001\002\000\004" +
    "\035\054\001\002\000\004\024\053\001\002\000\016\026" +
    "\uffd6\030\uffd6\031\uffd6\033\uffd6\035\uffd6\037\uffd6\001\002" +
    "\000\006\024\uffd5\033\051\001\002\000\004\024\uffd4\001" +
    "\002\000\004\026\uffdf\001\002\000\004\031\060\001\002" +
    "\000\022\003\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\024\uffc3\001\002\000\014\026\uffd8\030\uffd8" +
    "\033\uffd8\035\uffd8\037\uffd8\001\002\000\014\026\uffda\030" +
    "\uffda\033\uffda\035\uffda\037\uffda\001\002\000\014\026\uffd9" +
    "\030\uffd9\033\uffd9\035\uffd9\037\uffd9\001\002\000\006\035" +
    "\066\037\065\001\002\000\004\031\070\001\002\000\004" +
    "\031\067\001\002\000\022\003\uffc8\010\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\024\uffc8\001\002\000\022" +
    "\003\uffc7\010\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\024\uffc7\001\002\000\020\003\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\024\ufff4\001\002\000\004\024" +
    "\uffcb\001\002\000\004\025\074\001\002\000\010\026\100" +
    "\035\077\037\076\001\002\000\004\026\106\001\002\000" +
    "\006\026\uffe1\033\104\001\002\000\006\026\uffe0\033\102" +
    "\001\002\000\004\031\101\001\002\000\022\003\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\024\uffc6" +
    "\001\002\000\006\035\077\037\076\001\002\000\004\026" +
    "\uffe2\001\002\000\006\035\077\037\076\001\002\000\004" +
    "\026\uffe3\001\002\000\004\031\107\001\002\000\022\003" +
    "\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\024\uffc5\001\002\000\010\022\112\035\113\040\111\001" +
    "\002\000\006\022\124\033\123\001\002\000\004\031\122" +
    "\001\002\000\006\022\115\033\114\001\002\000\004\035" +
    "\117\001\002\000\004\031\116\001\002\000\034\003\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\024\uffc0\001\002" +
    "\000\004\022\120\001\002\000\004\031\121\001\002\000" +
    "\034\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\024" +
    "\uffbf\001\002\000\034\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\024\uffc1\001\002\000\004\040\126\001\002" +
    "\000\004\031\125\001\002\000\034\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\024\uffbe\001\002\000\004\022" +
    "\127\001\002\000\004\031\130\001\002\000\034\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\024\uffbd\001\002" +
    "\000\020\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\024\ufff2\001\002\000\022\003\140\010\020\013\023" +
    "\014\030\015\032\016\136\017\134\024\135\001\002\000" +
    "\022\003\uffe9\010\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\024\uffe9\001\002\000\004\034\152\001\002\000" +
    "\020\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\024\ufffa\001\002\000\004\034\145\001\002\000\022\003" +
    "\140\010\020\013\023\014\030\015\032\016\136\017\134" +
    "\024\uffea\001\002\000\004\031\143\001\002\000\004\024" +
    "\142\001\002\000\020\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\024\ufff6\001\002\000\022\003\uffe4\010" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\024\uffe4" +
    "\001\002\000\004\024\uffeb\001\002\000\006\035\147\037" +
    "\146\001\002\000\004\031\151\001\002\000\004\031\150" +
    "\001\002\000\022\003\uffe8\010\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\024\uffe8\001\002\000\022\003\uffe7" +
    "\010\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\024" +
    "\uffe7\001\002\000\006\035\154\037\153\001\002\000\004" +
    "\031\156\001\002\000\004\031\155\001\002\000\022\003" +
    "\uffe6\010\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\024\uffe6\001\002\000\022\003\uffe5\010\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\024\uffe5\001\002\000\004" +
    "\024\ufffd\001\002\000\012\003\165\011\163\012\164\024" +
    "\161\001\002\000\020\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\024\ufffb\001\002\000\012\003\165\011" +
    "\163\012\164\024\ufff0\001\002\000\004\037\177\001\002" +
    "\000\004\037\171\001\002\000\004\031\170\001\002\000" +
    "\004\024\167\001\002\000\020\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\024\ufff7\001\002\000\012\003" +
    "\uffec\011\uffec\012\uffec\024\uffec\001\002\000\004\027\172" +
    "\001\002\000\006\030\042\036\173\001\002\000\004\031" +
    "\176\001\002\000\004\031\175\001\002\000\012\003\uffed" +
    "\011\uffed\012\uffed\024\uffed\001\002\000\012\003\uffee\011" +
    "\uffee\012\uffee\024\uffee\001\002\000\004\027\200\001\002" +
    "\000\004\035\201\001\002\000\004\031\202\001\002\000" +
    "\012\003\uffef\011\uffef\012\uffef\024\uffef\001\002\000\004" +
    "\024\ufff1\001\002\000\014\003\210\010\020\014\206\020" +
    "\211\024\205\001\002\000\020\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\024\ufff9\001\002\000\004\034" +
    "\224\001\002\000\014\003\uffcd\010\uffcd\014\uffcd\020\uffcd" +
    "\024\uffcd\001\002\000\004\031\223\001\002\000\004\034" +
    "\216\001\002\000\004\024\215\001\002\000\014\003\210" +
    "\010\020\014\206\020\211\024\uffd2\001\002\000\004\024" +
    "\uffd3\001\002\000\020\003\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\024\ufff5\001\002\000\006\035\220\037" +
    "\217\001\002\000\004\031\222\001\002\000\004\031\221" +
    "\001\002\000\014\003\uffcf\010\uffcf\014\uffcf\020\uffcf\024" +
    "\uffcf\001\002\000\014\003\uffce\010\uffce\014\uffce\020\uffce" +
    "\024\uffce\001\002\000\014\003\uffcc\010\uffcc\014\uffcc\020" +
    "\uffcc\024\uffcc\001\002\000\006\035\226\037\225\001\002" +
    "\000\004\031\230\001\002\000\004\031\227\001\002\000" +
    "\014\003\uffd1\010\uffd1\014\uffd1\020\uffd1\024\uffd1\001\002" +
    "\000\014\003\uffd0\010\uffd0\014\uffd0\020\uffd0\024\uffd0\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\007\004\013" +
    "\023\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\156\004\013" +
    "\023\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\026\021\024\022\023\023\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\071\021\024\022\023" +
    "\023\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\034\013\037\014\036\001\001\000" +
    "\002\001\001\000\004\010\060\001\001\000\002\001\001" +
    "\000\010\010\034\013\037\014\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\102\001\001\000\002" +
    "\001\001\000\004\012\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\140\015\136\022\132\023\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\143\015\136\022\132\023\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\165\006\161\001\001\000\002\001\001" +
    "\000\006\005\202\006\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\212\017\211\023\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\212\017" +
    "\213\023\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacfca$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacfca$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacfca$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        int linea = s.right+1;
        int columna = s.left;
        String encontrado = s.value.toString();
        FVentanaP.AddES(encontrado, "Sintactico", "archivo",linea,columna);//Lista de Reporte
    }

    public Symbol getS(){
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
         int linea = s.right;
        int columna = s.left;
        String encontrado = s.value.toString();
        FVentanaP.AddES(encontrado, "Sintactico Panico", "archivo",linea,columna);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintacfca$actions {
  private final Sintacfca parser;

  /** Constructor */
  CUP$Sintacfca$actions(Sintacfca parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintacfca$do_action(
    int                        CUP$Sintacfca$act_num,
    java_cup.runtime.lr_parser CUP$Sintacfca$parser,
    java.util.Stack            CUP$Sintacfca$stack,
    int                        CUP$Sintacfca$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacfca$result;

      /* select the action based on the action number */
      switch (CUP$Sintacfca$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMPARE ::= Compare ParenA Ruta Coma Ruta ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("COMPARE",17, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMPARE ::= Compare ParenA Ruta ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("COMPARE",17, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPARE ::= Compare ParenA Cadena Coma Cadena ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("COMPARE",17, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMPARE ::= Compare ParenA Cadena ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("COMPARE",17, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMPARE ::= Compare ParenA ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("COMPARE",17, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DREUTILIZADAS ::= COMPARE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DREUTILIZADAS ::= Valores DPuntos CorcheA VALOREES CorcheC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DREUTILIZADAS ::= Valores DPuntos CorcheA CorcheC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DREUTILIZADAS ::= EjeX DPuntos CorcheA EJESX CorcheC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DREUTILIZADAS ::= EjeX DPuntos CorcheA CorcheC PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DREUTILIZADAS ::= Titulo DPuntos Identificador PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DREUTILIZADAS ::= Titulo DPuntos Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DREUTILIZADAS",16, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DPIE ::= DREUTILIZADAS 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DPIE",15, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DPIES ::= DPIE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DPIES",14, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DPIES ::= DPIE DPIES 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DPIES",14, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DLINEA ::= error PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEA",12, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DLINEA ::= COMPARE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEA",12, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DLINEA ::= Archivo DPuntos Identificador PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEA",12, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DLINEA ::= Archivo DPuntos Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEA",12, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DLINEA ::= Titulo DPuntos Identificador PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEA",12, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DLINEA ::= Titulo DPuntos Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEA",12, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DLINEAS ::= DLINEA 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEAS",13, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DLINEAS ::= DLINEA DLINEAS 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DLINEAS",13, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLEBARRA ::= Coma Cadena VARIABLEBARRA 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VARIABLEBARRA",5, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLEBARRA ::= Coma Cadena 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VARIABLEBARRA",5, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOBARRA ::= Dolar LlaveA Identificador VARIABLEBARRA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("TIPOBARRA",6, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOBARRA ::= Dolar LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("TIPOBARRA",6, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOREE ::= Coma TIPOBARRA 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREE",9, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOREE ::= Coma Cadena 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREE",9, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOREE ::= Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREE",9, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOREE ::= TIPOBARRA 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREE",9, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOREE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREE",9, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOREE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREE",9, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOREES ::= VALOREE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREES",10, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOREES ::= VALOREE VALOREES 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("VALOREES",10, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EJESX ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("EJESX",8, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EJESX ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("EJESX",8, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EJESX ::= Cadena Coma EJESX 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("EJESX",8, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EJESX ::= Identificador Coma EJESX 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("EJESX",8, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DBARRA ::= error PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRA",11, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DBARRA ::= TituloY DPuntos Identificador PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRA",11, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DBARRA ::= TituloY DPuntos Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRA",11, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DBARRA ::= TituloX DPuntos Identificador PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRA",11, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DBARRA ::= TituloX DPuntos Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRA",11, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DBARRA ::= DREUTILIZADAS 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRA",11, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DBARRAS ::= DBARRA 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRAS",7, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DBARRAS ::= DBARRA DBARRAS 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DBARRAS",7, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DGLOBALE ::= error PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DGLOBALE ::= Double Identificador Igual TIPOBARRA PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DGLOBALE ::= Double Identificador Igual Numero PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DGLOBALE ::= String Identificador Igual Cadena PComa 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALE",4, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DGLOBALES ::= DGLOBALE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALES",3, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DGLOBALES ::= DGLOBALE DGLOBALES 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("DGLOBALES",3, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSESTADISTICO ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSESTADISTICO ::= COMPARE 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSESTADISTICO ::= GPie LlaveA DPIES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSESTADISTICO ::= GLineas LlaveA DLINEAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSESTADISTICO ::= GBarras LlaveA DBARRAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSESTADISTICO ::= Globales LlaveA DGLOBALES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSESTADISTICO ::= GPie LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSESTADISTICO ::= GLineas LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSESTADISTICO ::= GBarras LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSESTADISTICO ::= Globales LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSESTADISTICOS ::= INSESTADISTICO 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICOS",1, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSESTADISTICOS ::= INSESTADISTICO INSESTADISTICOS 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INSESTADISTICOS",1, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= REstadisticos LlaveA INSESTADISTICOS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REstadisticos LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          return CUP$Sintacfca$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)).value;
		RESULT = start_val;
              CUP$Sintacfca$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.elementAt(CUP$Sintacfca$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacfca$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacfca$parser.done_parsing();
          return CUP$Sintacfca$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

