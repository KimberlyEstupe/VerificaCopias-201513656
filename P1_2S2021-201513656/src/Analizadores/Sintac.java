
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 04 10:01:07 CST 2021
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 04 10:01:07 CST 2021
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\007\000\002\012\004" +
    "\000\002\012\003\000\002\011\007\000\002\011\006\000" +
    "\002\011\003\000\002\027\004\000\002\027\005\000\002" +
    "\026\004\000\002\026\003\000\002\025\004\000\002\025" +
    "\003\000\002\005\004\000\002\005\003\000\002\004\003" +
    "\000\002\004\010\000\002\004\007\000\002\004\011\000" +
    "\002\004\007\000\002\004\007\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\006\003\000\002\006" +
    "\004\000\002\006\002\000\002\022\005\000\002\022\007" +
    "\000\002\022\006\000\002\017\003\000\002\017\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\020\010\000\002" +
    "\020\015\000\002\031\004\000\002\031\005\000\002\031" +
    "\003\000\002\031\002\000\002\021\004\000\002\021\006" +
    "\000\002\021\005\000\002\015\004\000\002\015\003\000" +
    "\002\015\006\000\002\014\006\000\002\014\006\000\002" +
    "\014\006\000\002\013\010\000\002\013\005\000\002\013" +
    "\002\000\002\010\004\000\002\010\005\000\002\016\003" +
    "\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\004\005\001\002\000\004\002\246\001" +
    "\002\000\004\046\010\001\002\000\006\002\uffff\004\005" +
    "\001\002\000\004\002\000\001\002\000\004\036\011\001" +
    "\002\000\010\020\014\037\012\046\016\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\010\020\014\037\ufffb\046" +
    "\016\001\002\000\004\046\240\001\002\000\010\020\ufff8" +
    "\037\ufff8\046\ufff8\001\002\000\006\030\023\034\021\001" +
    "\002\000\004\037\020\001\002\000\006\002\ufffd\004\ufffd" +
    "\001\002\000\010\035\234\041\230\046\233\001\002\000" +
    "\004\036\070\001\002\000\030\022\040\024\025\025\035" +
    "\026\033\027\037\033\032\034\024\044\026\045\036\046" +
    "\034\047\030\001\002\000\026\024\025\025\035\026\033" +
    "\027\037\033\032\034\024\044\026\045\036\046\034\047" +
    "\030\001\002\000\026\024\025\025\035\026\033\027\037" +
    "\033\032\034\024\044\026\045\036\046\034\047\030\001" +
    "\002\000\046\005\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2" +
    "\015\uffd2\016\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\031\uffd2\035\uffd2\037\uffd2\042\uffd2\046\uffd2" +
    "\001\002\000\044\005\uffe0\006\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\023\046\025\051" +
    "\026\050\027\047\031\045\037\uffe0\042\uffe0\046\uffe0\001" +
    "\002\000\046\005\uffd1\006\uffd1\007\uffd1\012\uffd1\013\uffd1" +
    "\015\uffd1\016\uffd1\020\uffd1\021\uffd1\023\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\031\uffd1\035\uffd1\037\uffd1\042\uffd1\046\uffd1" +
    "\001\002\000\032\005\uffba\006\uffba\007\uffba\012\uffba\013" +
    "\uffba\015\uffba\016\uffba\020\uffba\021\uffba\037\uffba\042\064" +
    "\046\uffba\001\002\000\046\005\uffd0\006\uffd0\007\uffd0\012" +
    "\uffd0\013\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\031\uffd0\035\uffd0\037\uffd0\042" +
    "\uffd0\046\uffd0\001\002\000\026\024\025\025\035\026\033" +
    "\027\037\033\032\034\024\044\026\045\036\046\034\047" +
    "\030\001\002\000\046\005\uffd3\006\uffd3\007\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\031\uffd3\035\uffd3\037\uffd3\042\uffd3" +
    "\046\uffd3\001\002\000\026\024\025\025\035\026\033\027" +
    "\037\033\032\034\024\044\026\045\036\046\034\047\030" +
    "\001\002\000\046\005\uffd4\006\uffd4\007\uffd4\012\uffd4\013" +
    "\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\023\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\031\uffd4\035\uffd4\037\uffd4\042\uffd4\046" +
    "\uffd4\001\002\000\026\024\025\025\035\026\033\027\037" +
    "\033\032\034\024\044\026\045\036\046\034\047\030\001" +
    "\002\000\004\034\041\001\002\000\030\024\025\025\035" +
    "\026\033\027\037\033\032\034\024\035\043\044\026\045" +
    "\036\046\034\047\030\001\002\000\032\005\uffdf\006\uffdf" +
    "\007\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\020\uffdf\021" +
    "\uffdf\037\uffdf\042\uffdf\046\uffdf\001\002\000\034\005\uffbd" +
    "\006\uffbd\007\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\021\uffbd\036\uffbd\037\uffbd\042\uffbd\046\uffbd\001\002" +
    "\000\016\023\046\025\051\026\050\027\047\031\045\035" +
    "\052\001\002\000\026\024\025\025\035\026\033\027\037" +
    "\033\032\034\024\044\026\045\036\046\034\047\030\001" +
    "\002\000\026\024\025\025\035\026\033\027\037\033\032" +
    "\034\024\044\026\045\036\046\034\047\030\001\002\000" +
    "\026\024\025\025\035\026\033\027\037\033\032\034\024" +
    "\044\026\045\036\046\034\047\030\001\002\000\026\024" +
    "\025\025\035\026\033\027\037\033\032\034\024\044\026" +
    "\045\036\046\034\047\030\001\002\000\026\024\025\025" +
    "\035\026\033\027\037\033\032\034\024\044\026\045\036" +
    "\046\034\047\030\001\002\000\034\005\uffbc\006\uffbc\007" +
    "\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc" +
    "\036\uffbc\037\uffbc\042\uffbc\046\uffbc\001\002\000\046\005" +
    "\uffda\006\uffda\007\uffda\012\uffda\013\uffda\015\uffda\016\uffda" +
    "\020\uffda\021\uffda\023\046\025\uffda\026\050\027\047\031" +
    "\045\035\uffda\037\uffda\042\uffda\046\uffda\001\002\000\046" +
    "\005\uffdc\006\uffdc\007\uffdc\012\uffdc\013\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\021\uffdc\023\046\025\uffdc\026\uffdc\027\uffdc" +
    "\031\045\035\uffdc\037\uffdc\042\uffdc\046\uffdc\001\002\000" +
    "\046\005\uffdb\006\uffdb\007\uffdb\012\uffdb\013\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\023\046\025\uffdb\026\uffdb\027" +
    "\uffdb\031\045\035\uffdb\037\uffdb\042\uffdb\046\uffdb\001\002" +
    "\000\046\005\uffde\006\uffde\007\uffde\012\uffde\013\uffde\015" +
    "\uffde\016\uffde\020\uffde\021\uffde\023\uffde\025\uffde\026\uffde" +
    "\027\uffde\031\045\035\uffde\037\uffde\042\uffde\046\uffde\001" +
    "\002\000\046\005\uffdd\006\uffdd\007\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\021\uffdd\023\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\031\045\035\uffdd\037\uffdd\042\uffdd\046\uffdd" +
    "\001\002\000\046\005\uffd8\006\uffd8\007\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023\046\025\uffd8" +
    "\026\uffd8\027\uffd8\031\045\035\uffd8\037\uffd8\042\uffd8\046" +
    "\uffd8\001\002\000\046\005\uffd9\006\uffd9\007\uffd9\012\uffd9" +
    "\013\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023\046\025" +
    "\uffd9\026\050\027\047\031\045\035\uffd9\037\uffd9\042\uffd9" +
    "\046\uffd9\001\002\000\046\005\uffd7\006\uffd7\007\uffd7\012" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\046" +
    "\025\uffd7\026\uffd7\027\uffd7\031\045\035\uffd7\037\uffd7\042" +
    "\uffd7\046\uffd7\001\002\000\030\005\uffe1\006\uffe1\007\uffe1" +
    "\012\uffe1\013\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\037" +
    "\uffe1\046\uffe1\001\002\000\032\005\uffbb\006\uffbb\007\uffbb" +
    "\012\uffbb\013\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\035" +
    "\uffbb\037\uffbb\046\uffbb\001\002\000\046\005\uffd6\006\uffd6" +
    "\007\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\023\046\025\051\026\050\027\047\031\045\035\uffd6" +
    "\037\uffd6\042\uffd6\046\uffd6\001\002\000\016\023\046\025" +
    "\051\026\050\027\047\031\045\035\067\001\002\000\046" +
    "\005\uffd5\006\uffd5\007\uffd5\012\uffd5\013\uffd5\015\uffd5\016" +
    "\uffd5\020\uffd5\021\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\035\uffd5\037\uffd5\042\uffd5\046\uffd5\001\002\000" +
    "\024\005\101\006\076\007\074\012\103\013\073\020\014" +
    "\021\071\037\100\046\104\001\002\000\004\034\041\001" +
    "\002\000\004\037\203\001\002\000\004\040\177\001\002" +
    "\000\004\034\041\001\002\000\030\005\uffef\006\uffef\007" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\037\uffef\046\uffef\001\002\000\004\034\041\001\002\000" +
    "\030\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\021\uffe8\037\uffe8\046\uffe8\001\002\000" +
    "\010\020\ufff9\037\ufff9\046\ufff9\001\002\000\004\036\150" +
    "\001\002\000\030\005\101\006\076\007\074\012\103\013" +
    "\073\015\ufff0\016\ufff0\020\014\021\071\037\ufff0\046\104" +
    "\001\002\000\004\034\111\001\002\000\010\030\023\032" +
    "\105\034\021\001\002\000\032\005\uffba\006\uffba\007\uffba" +
    "\012\uffba\013\uffba\015\uffba\016\uffba\020\uffba\021\uffba\037" +
    "\uffba\042\064\046\uffba\001\002\000\032\005\uffba\006\uffba" +
    "\007\uffba\012\uffba\013\uffba\015\uffba\016\uffba\020\uffba\021" +
    "\uffba\037\uffba\042\064\046\uffba\001\002\000\030\005\uffe9" +
    "\006\uffe9\007\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\037\uffe9\046\uffe9\001\002\000\030\005\uffe7" +
    "\006\uffe7\007\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\037\uffe7\046\uffe7\001\002\000\010\020\112" +
    "\035\115\046\114\001\002\000\004\046\144\001\002\000" +
    "\004\042\126\001\002\000\004\030\124\001\002\000\004" +
    "\036\116\001\002\000\026\005\101\006\076\007\074\012" +
    "\103\013\073\017\120\020\014\021\071\037\uffe4\046\104" +
    "\001\002\000\010\015\uffe6\016\uffe6\037\uffe6\001\002\000" +
    "\012\015\uffba\016\uffba\037\uffba\042\064\001\002\000\004" +
    "\037\122\001\002\000\030\005\uffcf\006\uffcf\007\uffcf\012" +
    "\uffcf\013\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\037\uffcf" +
    "\046\uffcf\001\002\000\010\015\uffe5\016\uffe5\037\uffe5\001" +
    "\002\000\026\024\025\025\035\026\033\027\037\033\032" +
    "\034\024\044\026\045\036\046\034\047\030\001\002\000" +
    "\020\023\046\025\051\026\050\027\047\031\045\035\uffc7" +
    "\042\uffc7\001\002\000\026\024\025\025\035\026\033\027" +
    "\037\033\032\034\024\044\026\045\036\046\034\047\030" +
    "\001\002\000\016\023\046\025\051\026\050\027\047\031" +
    "\045\042\130\001\002\000\032\020\112\024\025\025\035" +
    "\026\033\027\037\033\032\034\024\035\uffca\044\026\045" +
    "\036\046\132\047\030\001\002\000\020\023\046\025\051" +
    "\026\050\027\047\031\045\035\uffba\042\064\001\002\000" +
    "\024\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\124\031\uffd3" +
    "\032\141\035\uffd3\042\uffd3\001\002\000\004\035\135\001" +
    "\002\000\004\035\uffcb\001\002\000\004\036\136\001\002" +
    "\000\026\005\101\006\076\007\074\012\103\013\073\017" +
    "\120\020\014\021\071\037\uffe4\046\104\001\002\000\004" +
    "\037\140\001\002\000\030\005\uffce\006\uffce\007\uffce\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\020\uffce\021\uffce\037\uffce" +
    "\046\uffce\001\002\000\006\035\uffba\042\064\001\002\000" +
    "\004\035\uffcc\001\002\000\004\035\uffcd\001\002\000\010" +
    "\030\145\035\uffc9\042\uffc9\001\002\000\026\024\025\025" +
    "\035\026\033\027\037\033\032\034\024\044\026\045\036" +
    "\046\034\047\030\001\002\000\020\023\046\025\051\026" +
    "\050\027\047\031\045\035\uffc8\042\uffc8\001\002\000\010" +
    "\015\ufff1\016\ufff1\037\ufff1\001\002\000\026\005\101\006" +
    "\076\007\074\012\103\013\073\017\120\020\014\021\071" +
    "\037\uffe4\046\104\001\002\000\004\037\152\001\002\000" +
    "\004\006\153\001\002\000\004\034\041\001\002\000\004" +
    "\042\155\001\002\000\030\005\uffec\006\uffec\007\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\020\uffec\021\uffec\037\uffec" +
    "\046\uffec\001\002\000\004\036\157\001\002\000\026\005" +
    "\101\006\076\007\074\012\103\013\073\017\120\020\014" +
    "\021\071\037\uffe4\046\104\001\002\000\004\037\161\001" +
    "\002\000\030\005\uffed\006\uffed\007\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\020\uffed\021\uffed\037\uffed\046\uffed\001" +
    "\002\000\004\036\163\001\002\000\026\005\101\006\076" +
    "\007\074\012\103\013\073\017\120\020\014\021\071\037" +
    "\uffe4\046\104\001\002\000\004\037\165\001\002\000\032" +
    "\005\uffbe\006\uffbe\007\uffbe\010\167\012\uffbe\013\uffbe\015" +
    "\uffbe\016\uffbe\020\uffbe\021\uffbe\037\uffbe\046\uffbe\001\002" +
    "\000\030\005\uffee\006\uffee\007\uffee\012\uffee\013\uffee\015" +
    "\uffee\016\uffee\020\uffee\021\uffee\037\uffee\046\uffee\001\002" +
    "\000\006\007\171\036\170\001\002\000\004\037\176\001" +
    "\002\000\004\034\041\001\002\000\004\036\173\001\002" +
    "\000\004\037\174\001\002\000\032\005\uffbe\006\uffbe\007" +
    "\uffbe\010\167\012\uffbe\013\uffbe\015\uffbe\016\uffbe\020\uffbe" +
    "\021\uffbe\037\uffbe\046\uffbe\001\002\000\030\005\uffc0\006" +
    "\uffc0\007\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\020\uffc0" +
    "\021\uffc0\037\uffc0\046\uffc0\001\002\000\030\005\uffbf\006" +
    "\uffbf\007\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\020\uffbf" +
    "\021\uffbf\037\uffbf\046\uffbf\001\002\000\004\014\200\001" +
    "\002\000\004\034\041\001\002\000\032\005\uffba\006\uffba" +
    "\007\uffba\012\uffba\013\uffba\015\uffba\016\uffba\020\uffba\021" +
    "\uffba\037\uffba\042\064\046\uffba\001\002\000\030\005\uffea" +
    "\006\uffea\007\uffea\012\uffea\013\uffea\015\uffea\016\uffea\020" +
    "\uffea\021\uffea\037\uffea\046\uffea\001\002\000\010\020\ufffa" +
    "\037\ufffa\046\ufffa\001\002\000\004\036\205\001\002\000" +
    "\006\015\206\016\207\001\002\000\004\043\225\001\002" +
    "\000\010\044\216\045\214\047\215\001\002\000\004\037" +
    "\213\001\002\000\010\015\206\016\207\037\uffc5\001\002" +
    "\000\004\037\uffc6\001\002\000\030\005\uffeb\006\uffeb\007" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb" +
    "\037\uffeb\046\uffeb\001\002\000\004\043\223\001\002\000" +
    "\004\043\221\001\002\000\004\043\217\001\002\000\032" +
    "\005\101\006\076\007\074\012\103\013\073\015\uffe4\016" +
    "\uffe4\017\120\020\014\021\071\037\uffe4\046\104\001\002" +
    "\000\010\015\uffc3\016\uffc3\037\uffc3\001\002\000\032\005" +
    "\101\006\076\007\074\012\103\013\073\015\uffe4\016\uffe4" +
    "\017\120\020\014\021\071\037\uffe4\046\104\001\002\000" +
    "\010\015\uffc2\016\uffc2\037\uffc2\001\002\000\032\005\101" +
    "\006\076\007\074\012\103\013\073\015\uffe4\016\uffe4\017" +
    "\120\020\014\021\071\037\uffe4\046\104\001\002\000\010" +
    "\015\uffc1\016\uffc1\037\uffc1\001\002\000\024\005\101\006" +
    "\076\007\074\012\103\013\073\017\120\020\014\021\071" +
    "\046\104\001\002\000\002\001\002\000\004\037\uffc4\001" +
    "\002\000\004\046\237\001\002\000\010\035\ufff4\041\230" +
    "\046\233\001\002\000\004\035\235\001\002\000\010\035" +
    "\ufff2\041\ufff2\046\ufff2\001\002\000\034\005\ufff7\006\ufff7" +
    "\007\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\020\ufff7\021" +
    "\ufff7\036\ufff7\037\ufff7\042\ufff7\046\ufff7\001\002\000\034" +
    "\005\ufff6\006\ufff6\007\ufff6\012\ufff6\013\ufff6\015\ufff6\016" +
    "\ufff6\020\ufff6\021\ufff6\036\ufff6\037\ufff6\042\ufff6\046\ufff6" +
    "\001\002\000\004\035\ufff5\001\002\000\010\035\ufff3\041" +
    "\ufff3\046\ufff3\001\002\000\034\005\uffba\006\uffba\007\uffba" +
    "\012\uffba\013\uffba\015\uffba\016\uffba\020\uffba\021\uffba\030" +
    "\242\037\uffba\042\064\046\uffba\001\002\000\030\005\uffe3" +
    "\006\uffe3\007\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\020" +
    "\uffe3\021\uffe3\037\uffe3\046\uffe3\001\002\000\030\022\040" +
    "\024\025\025\035\026\033\027\037\033\032\034\024\044" +
    "\026\045\036\046\034\047\030\001\002\000\032\005\uffba" +
    "\006\uffba\007\uffba\012\uffba\013\uffba\015\uffba\016\uffba\020" +
    "\uffba\021\uffba\037\uffba\042\064\046\uffba\001\002\000\030" +
    "\005\uffe2\006\uffe2\007\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\020\uffe2\021\uffe2\037\uffe2\046\uffe2\001\002\000\004" +
    "\037\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\003\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\012\012" +
    "\016\022\014\001\001\000\002\001\001\000\010\011\012" +
    "\012\244\022\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\230\026\231\001\001\000\002\001" +
    "\001\000\006\017\030\023\026\001\001\000\004\023\065" +
    "\001\001\000\004\023\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\062\001\001" +
    "\000\002\001\001\000\004\023\061\001\001\000\002\001" +
    "\001\000\004\023\060\001\001\000\002\001\001\000\004" +
    "\023\057\001\001\000\004\010\041\001\001\000\004\023" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\056\001\001\000\004\023\055\001" +
    "\001\000\004\023\054\001\001\000\004\023\053\001\001" +
    "\000\004\023\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\101\005\071\020\074\022\076\001\001\000\004\010\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\161\001\001\000\002\001\001\000\004\010\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\101\005\146\020\074\022\076\001\001\000\002" +
    "\001\001\000\004\027\105\001\001\000\004\016\107\001" +
    "\001\000\004\016\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\101\005\116\006\120\020\074\022\076\001\001\000" +
    "\002\001\001\000\004\016\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\124\001" +
    "\001\000\002\001\001\000\004\023\126\001\001\000\002" +
    "\001\001\000\010\021\133\023\130\031\132\001\001\000" +
    "\004\016\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\101\005" +
    "\116\006\136\020\074\022\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\101\005\116\006\150\020\074\022\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\101\005\116\006\157\020\074\022\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\101\005\116\006\163\020\074\022\076\001\001\000" +
    "\002\001\001\000\004\013\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\200\001\001\000\004\016\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\210\015\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\210\015\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\101\005" +
    "\116\006\217\020\074\022\076\001\001\000\002\001\001" +
    "\000\014\004\101\005\116\006\221\020\074\022\076\001" +
    "\001\000\002\001\001\000\014\004\101\005\116\006\223" +
    "\020\074\022\076\001\001\000\002\001\001\000\014\004" +
    "\101\005\116\006\225\020\074\022\076\001\001\000\004" +
    "\030\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\230\026\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\240\001\001\000\002" +
    "\001\001\000\006\017\242\023\026\001\001\000\004\016" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println(s.value.toString());
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {
  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FINEXPRE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FINEXPRE ::= PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARENTESIS ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARENTESIS ::= ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELSE ::= Else LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELSE ::= Else If PARENTESIS LlaveA LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASE ::= Case Numero DPuntos INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE ::= Case Char DPuntos INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE ::= Case Cadena DPuntos INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= Default DPuntos INSTRUCCIONES CASBREAK 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARAFOR ::= Identificador Igual EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARAFOR",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARAFOR ::= Variable Identificador Igual EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARAFOR",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARAFOR ::= Variable Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARAFOR",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ULTIDE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",23, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ULTIDE ::= DECLARAFOR 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",23, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ULTIDE ::= Identificador Incremento FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",23, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ULTIDE ::= EXPRESIONES FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",23, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= For ParenA DECLARAFOR PComa EXPRESIONES PComa ULTIDE ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-10)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESIONES ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONES ::= Char 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONES ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIONES ::= Not EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONES ::= Suma EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES ::= Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES ::= Matematico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES ::= EXPRESIONES Matematico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONES ::= EXPRESIONES Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONES ::= EXPRESIONES Suma EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONES ::= EXPRESIONES Relacionales EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESIONES ::= EXPRESIONES Logico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOD ::= Require PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOD",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOD ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOD",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARA ::= Identificador Igual TIPOD FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",16, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARA ::= Variable Identificador Igual TIPOD FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",16, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARA ::= Variable Identificador FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",16, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCIONES ::= Break FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= Identificador Incremento FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= Identificador PARENMETODOS FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= Console Punto Log PARENTESIS FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= Switch PARENTESIS LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= Do LlaveA INSTRUCCIONES LlaveC While PARENTESIS PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= If PARENTESIS LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETRO",19, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO ::= Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETRO",19, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETROS ::= PARAMETRO PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARENMETODOS ::= ParenA PARAMETROS ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENMETODOS",21, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARENMETODOS ::= ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENMETODOS",21, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= Identificador PARENMETODOS LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= Identificador PARENMETODOS LlaveA SENTENCIAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODOS",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODOS ::= METODO METODOS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODOS",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= Clase Identificador LlaveA METODOS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= Clase Identificador LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIS ::= INI 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIS ::= INI INIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

