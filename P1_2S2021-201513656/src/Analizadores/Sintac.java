
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 02 22:03:22 CST 2021
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 02 22:03:22 CST 2021
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\007\000\002\012\004" +
    "\000\002\012\003\000\002\011\007\000\002\011\010\000" +
    "\002\011\003\000\002\005\004\000\002\005\003\000\002" +
    "\004\007\000\002\004\010\000\002\004\007\000\002\004" +
    "\011\000\002\004\007\000\002\004\007\000\002\004\006" +
    "\000\002\004\003\000\002\004\005\000\002\004\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\002\000\002" +
    "\017\005\000\002\017\007\000\002\017\006\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\013\011" +
    "\000\002\013\005\000\002\013\002\000\002\020\004\000" +
    "\002\010\004\000\002\010\005\000\002\016\003\000\002" +
    "\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\004\005\001\002\000\004\002\171\001" +
    "\002\000\004\046\010\001\002\000\006\002\uffff\004\005" +
    "\001\002\000\004\002\000\001\002\000\004\036\011\001" +
    "\002\000\010\020\014\037\012\046\016\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\010\020\014\037\ufffb\046" +
    "\016\001\002\000\004\046\163\001\002\000\010\020\ufff8" +
    "\037\ufff8\046\ufff8\001\002\000\006\030\022\034\021\001" +
    "\002\000\004\037\020\001\002\000\006\002\ufffd\004\ufffd" +
    "\001\002\000\004\035\047\001\002\000\020\024\026\027" +
    "\027\033\032\034\023\044\031\045\024\047\025\001\002" +
    "\000\020\024\026\027\027\033\032\034\023\044\031\045" +
    "\024\047\025\001\002\000\040\005\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\020\uffdf\021\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\035\uffdf\037\uffdf\042\uffdf\046\uffdf\001\002" +
    "\000\040\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\020\uffdd\021\uffdd\025\uffdd\026\uffdd\027\uffdd\035\uffdd" +
    "\037\uffdd\042\uffdd\046\uffdd\001\002\000\020\024\026\027" +
    "\027\033\032\034\023\044\031\045\024\047\025\001\002" +
    "\000\020\024\026\027\027\033\032\034\023\044\031\045" +
    "\024\047\025\001\002\000\036\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\012\uffce\013\uffce\020\uffce\021\uffce\025\036\026" +
    "\035\027\034\037\uffce\042\037\046\uffce\001\002\000\040" +
    "\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\020" +
    "\uffde\021\uffde\025\uffde\026\uffde\027\uffde\035\uffde\037\uffde" +
    "\042\uffde\046\uffde\001\002\000\040\005\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\020\uffdc\021\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\035\uffdc\037\uffdc\042\uffdc\046\uffdc\001" +
    "\002\000\026\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\020\uffe6\021\uffe6\037\uffe6\046\uffe6\001\002\000" +
    "\020\024\026\027\027\033\032\034\023\044\031\045\024" +
    "\047\025\001\002\000\020\024\026\027\027\033\032\034" +
    "\023\044\031\045\024\047\025\001\002\000\020\024\026" +
    "\027\027\033\032\034\023\044\031\045\024\047\025\001" +
    "\002\000\026\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\020\uffcf\021\uffcf\037\uffcf\046\uffcf\001\002\000" +
    "\040\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\020\uffe3\021\uffe3\025\uffe3\026\uffe3\027\uffe3\035\uffe3\037" +
    "\uffe3\042\uffe3\046\uffe3\001\002\000\040\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\020\uffe5\021\uffe5\025" +
    "\036\026\uffe5\027\uffe5\035\uffe5\037\uffe5\042\uffe5\046\uffe5" +
    "\001\002\000\040\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\020\uffe4\021\uffe4\025\036\026\uffe4\027\uffe4" +
    "\035\uffe4\037\uffe4\042\uffe4\046\uffe4\001\002\000\040\005" +
    "\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\020\uffe2" +
    "\021\uffe2\025\036\026\uffe2\027\uffe2\035\uffe2\037\uffe2\042" +
    "\uffe2\046\uffe2\001\002\000\040\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\020\uffe1\021\uffe1\025\036\026" +
    "\035\027\034\035\uffe1\037\uffe1\042\uffe1\046\uffe1\001\002" +
    "\000\012\025\036\026\035\027\034\035\046\001\002\000" +
    "\040\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\020\uffe0\021\uffe0\025\uffe0\026\uffe0\027\uffe0\035\uffe0\037" +
    "\uffe0\042\uffe0\046\uffe0\001\002\000\004\036\050\001\002" +
    "\000\026\005\061\006\055\007\054\011\060\012\063\013" +
    "\053\020\014\021\051\037\057\046\065\001\002\000\004" +
    "\034\070\001\002\000\004\037\143\001\002\000\004\040" +
    "\137\001\002\000\004\034\070\001\002\000\004\034\070" +
    "\001\002\000\026\005\uffee\006\uffee\007\uffee\011\uffee\012" +
    "\uffee\013\uffee\020\uffee\021\uffee\037\uffee\046\uffee\001\002" +
    "\000\010\020\ufffa\037\ufffa\046\ufffa\001\002\000\004\034" +
    "\112\001\002\000\004\036\104\001\002\000\026\005\061" +
    "\006\055\007\054\011\060\012\063\013\053\020\014\021" +
    "\051\037\ufff6\046\065\001\002\000\004\034\070\001\002" +
    "\000\026\005\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013" +
    "\uffec\020\uffec\021\uffec\037\uffec\046\uffec\001\002\000\006" +
    "\030\022\032\066\001\002\000\030\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\012\uffce\013\uffce\020\uffce\021\uffce\037\uffce" +
    "\042\037\046\uffce\001\002\000\026\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\012\uffed\013\uffed\020\uffed\021\uffed\037\uffed" +
    "\046\uffed\001\002\000\022\024\026\027\027\033\032\034" +
    "\023\035\100\044\031\045\024\047\025\001\002\000\004" +
    "\036\072\001\002\000\030\005\061\006\055\007\054\011" +
    "\060\012\063\013\053\017\074\020\014\021\051\037\uffe9" +
    "\046\065\001\002\000\004\037\uffeb\001\002\000\006\037" +
    "\uffce\042\037\001\002\000\004\037\076\001\002\000\026" +
    "\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\020" +
    "\ufff5\021\ufff5\037\ufff5\046\ufff5\001\002\000\004\037\uffea" +
    "\001\002\000\032\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\020\uffd1\021\uffd1\036\uffd1\037\uffd1\042\uffd1" +
    "\046\uffd1\001\002\000\012\025\036\026\035\027\034\035" +
    "\102\001\002\000\032\005\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\020\uffd0\021\uffd0\036\uffd0\037\uffd0\042" +
    "\uffd0\046\uffd0\001\002\000\004\037\ufff7\001\002\000\030" +
    "\005\061\006\055\007\054\011\060\012\063\013\053\017" +
    "\074\020\014\021\051\037\uffe9\046\065\001\002\000\004" +
    "\037\106\001\002\000\004\006\107\001\002\000\004\034" +
    "\070\001\002\000\004\042\111\001\002\000\026\005\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\020\ufff2\021" +
    "\ufff2\037\ufff2\046\ufff2\001\002\000\004\035\113\001\002" +
    "\000\030\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013" +
    "\uffce\020\uffce\021\uffce\037\uffce\042\037\046\uffce\001\002" +
    "\000\026\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013" +
    "\uffef\020\uffef\021\uffef\037\uffef\046\uffef\001\002\000\004" +
    "\036\116\001\002\000\030\005\061\006\055\007\054\011" +
    "\060\012\063\013\053\017\074\020\014\021\051\037\uffe9" +
    "\046\065\001\002\000\004\037\120\001\002\000\026\005" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\020\ufff3" +
    "\021\ufff3\037\ufff3\046\ufff3\001\002\000\004\036\122\001" +
    "\002\000\030\005\061\006\055\007\054\011\060\012\063" +
    "\013\053\017\074\020\014\021\051\037\uffe9\046\065\001" +
    "\002\000\004\037\124\001\002\000\030\005\uffd3\006\uffd3" +
    "\007\uffd3\010\126\011\uffd3\012\uffd3\013\uffd3\020\uffd3\021" +
    "\uffd3\037\uffd3\046\uffd3\001\002\000\026\005\ufff4\006\ufff4" +
    "\007\ufff4\011\ufff4\012\ufff4\013\ufff4\020\ufff4\021\ufff4\037" +
    "\ufff4\046\ufff4\001\002\000\006\007\130\036\127\001\002" +
    "\000\004\037\136\001\002\000\004\034\131\001\002\000" +
    "\004\035\132\001\002\000\004\036\133\001\002\000\004" +
    "\037\134\001\002\000\030\005\uffd3\006\uffd3\007\uffd3\010" +
    "\126\011\uffd3\012\uffd3\013\uffd3\020\uffd3\021\uffd3\037\uffd3" +
    "\046\uffd3\001\002\000\026\005\uffd5\006\uffd5\007\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\020\uffd5\021\uffd5\037\uffd5\046\uffd5" +
    "\001\002\000\026\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\020\uffd4\021\uffd4\037\uffd4\046\uffd4\001\002" +
    "\000\004\014\140\001\002\000\004\034\070\001\002\000" +
    "\030\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\020\uffce\021\uffce\037\uffce\042\037\046\uffce\001\002\000" +
    "\026\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\020\ufff0\021\ufff0\037\ufff0\046\ufff0\001\002\000\010\020" +
    "\ufff9\037\ufff9\046\ufff9\001\002\000\004\036\145\001\002" +
    "\000\006\015\146\016\147\001\002\000\004\043\162\001" +
    "\002\000\010\044\156\045\154\047\155\001\002\000\004" +
    "\037\153\001\002\000\010\015\146\016\147\037\uffda\001" +
    "\002\000\004\037\uffdb\001\002\000\026\005\ufff1\006\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\ufff1\020\ufff1\021\ufff1\037" +
    "\ufff1\046\ufff1\001\002\000\004\043\161\001\002\000\004" +
    "\043\160\001\002\000\004\043\157\001\002\000\010\015" +
    "\uffd8\016\uffd8\037\uffd8\001\002\000\010\015\uffd7\016\uffd7" +
    "\037\uffd7\001\002\000\010\015\uffd6\016\uffd6\037\uffd6\001" +
    "\002\000\004\037\uffd9\001\002\000\032\005\uffce\006\uffce" +
    "\007\uffce\011\uffce\012\uffce\013\uffce\020\uffce\021\uffce\030" +
    "\165\037\uffce\042\037\046\uffce\001\002\000\026\005\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\020\uffe8\021" +
    "\uffe8\037\uffe8\046\uffe8\001\002\000\020\024\026\027\027" +
    "\033\032\034\023\044\031\045\024\047\025\001\002\000" +
    "\036\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\020\uffce\021\uffce\025\036\026\035\027\034\037\uffce\042" +
    "\037\046\uffce\001\002\000\026\005\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\020\uffe7\021\uffe7\037\uffe7\046" +
    "\uffe7\001\002\000\004\037\ufffc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\003\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\012\012" +
    "\016\017\014\001\001\000\002\001\001\000\010\011\012" +
    "\012\167\017\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\027\001\001\000\004\021" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\043\001\001\000\004\021\042\001\001\000\004\016" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\041\001\001\000\004\021\040\001" +
    "\001\000\004\021\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\061\005\051\017\055\023" +
    "\063\001\001\000\004\010\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\120\001\001\000\004\010" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\061\005\102\017" +
    "\055\023\063\001\001\000\004\010\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\066\001\001\000" +
    "\002\001\001\000\004\021\100\001\001\000\002\001\001" +
    "\000\014\004\061\005\072\006\074\017\055\023\063\001" +
    "\001\000\002\001\001\000\004\016\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\061\005\072\006\104\017\055\023\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\061\005\072\006\116\017\055\023" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\061\005\072\006\122\017\055\023" +
    "\063\001\001\000\002\001\001\000\004\013\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\140\001\001" +
    "\000\004\016\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\150\015\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\150\015\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\163\001\001\000\002\001" +
    "\001\000\004\021\165\001\001\000\004\016\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println(s.value.toString());
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {
  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FINEXPRE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FINEXPRE ::= PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARENTESIS ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARENTESIS ::= ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // REQUIRE ::= Require PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("REQUIRE",14, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE ::= Else LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= Else If ParenA ParenC LlaveA LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASE ::= Case Numero DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASE ::= Case Char DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASE ::= Case Cadena DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASES ::= Default DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONES ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONES ::= Char 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESIONES ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESIONES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESIONES ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESIONES ::= Not EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESIONES ::= Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESIONES ::= EXPRESIONES Matematico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESIONES ::= EXPRESIONES Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESIONES ::= EXPRESIONES Suma EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARA ::= Identificador Igual EXPRESIONES FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARA ::= Variable Identificador Igual EXPRESIONES FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARA ::= Variable Identificador FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONES ::= Break FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= Identificador Incremento FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Llamada ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= Console Punto Log PARENTESIS FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Switch PARENTESIS LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Do LlaveA INSTRUCCIONES LlaveC While PARENTESIS PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= If PARENTESIS LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= For PARENTESIS LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= Identificador ParenA ParenC LlaveA SENTENCIAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= Identificador ParenA ParenC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODOS",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODOS ::= METODO METODOS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODOS",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= Clase Identificador LlaveA METODOS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= Clase Identificador LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIS ::= INI 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIS ::= INI INIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

