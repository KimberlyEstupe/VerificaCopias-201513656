
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 01 17:29:20 CST 2021
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 01 17:29:20 CST 2021
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\011\004\000\002\011" +
    "\003\000\002\002\006\000\002\002\007\000\002\005\004" +
    "\000\002\005\003\000\002\003\010\000\002\003\011\000" +
    "\002\003\010\000\002\003\012\000\002\003\010\000\002" +
    "\003\010\000\002\003\006\000\002\003\003\000\002\003" +
    "\005\000\002\006\003\000\002\006\004\000\002\006\002" +
    "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\004\011\000\002\004\005\000\002\004\002\000\002\014" +
    "\005\000\002\012\003\000\002\012\002\000\002\013\005" +
    "\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\004\005\001\002\000\004\002\133\001" +
    "\002\000\004\045\010\001\002\000\006\002\uffff\004\005" +
    "\001\002\000\004\002\000\001\002\000\004\035\011\001" +
    "\002\000\026\005\023\006\016\007\017\011\022\012\025" +
    "\013\013\020\015\021\012\036\021\045\026\001\002\000" +
    "\004\033\113\001\002\000\004\037\106\001\002\000\004" +
    "\036\105\001\002\000\004\045\101\001\002\000\004\033" +
    "\074\001\002\000\004\033\055\001\002\000\026\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\020\ufff3\021" +
    "\ufff3\036\ufff3\045\ufff3\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002\000\004\033\052\001\002\000\004\035\043\001" +
    "\002\000\026\005\023\006\016\007\017\011\022\012\025" +
    "\013\013\020\015\021\012\036\ufffb\045\026\001\002\000" +
    "\004\033\032\001\002\000\004\031\027\001\002\000\030" +
    "\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\020" +
    "\uffe3\021\uffe3\036\uffe3\041\031\045\uffe3\001\002\000\026" +
    "\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\020" +
    "\ufff2\021\ufff2\036\ufff2\045\ufff2\001\002\000\026\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\020\uffe4\021" +
    "\uffe4\036\uffe4\045\uffe4\001\002\000\004\034\033\001\002" +
    "\000\004\035\034\001\002\000\030\005\023\006\016\007" +
    "\017\011\022\012\025\013\013\017\036\020\015\021\012" +
    "\036\uffef\045\026\001\002\000\004\036\ufff1\001\002\000" +
    "\006\036\uffe3\041\031\001\002\000\004\036\040\001\002" +
    "\000\026\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\020\ufffa\021\ufffa\036\ufffa\045\ufffa\001\002\000\004" +
    "\036\ufff0\001\002\000\004\036\ufffc\001\002\000\030\005" +
    "\023\006\016\007\017\011\022\012\025\013\013\017\036" +
    "\020\015\021\012\036\uffef\045\026\001\002\000\004\036" +
    "\045\001\002\000\004\006\046\001\002\000\004\033\047" +
    "\001\002\000\004\034\050\001\002\000\004\041\051\001" +
    "\002\000\026\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\020\ufff7\021\ufff7\036\ufff7\045\ufff7\001\002\000" +
    "\004\034\053\001\002\000\030\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\020\uffe3\021\uffe3\036\uffe3\041" +
    "\031\045\uffe3\001\002\000\026\005\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\020\ufff4\021\ufff4\036\ufff4\045" +
    "\ufff4\001\002\000\004\034\056\001\002\000\004\035\057" +
    "\001\002\000\030\005\023\006\016\007\017\011\022\012" +
    "\025\013\013\017\036\020\015\021\012\036\uffef\045\026" +
    "\001\002\000\004\036\061\001\002\000\030\005\uffe6\006" +
    "\uffe6\007\uffe6\010\063\011\uffe6\012\uffe6\013\uffe6\020\uffe6" +
    "\021\uffe6\036\uffe6\045\uffe6\001\002\000\026\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\020\ufff9\021\ufff9" +
    "\036\ufff9\045\ufff9\001\002\000\006\007\065\035\064\001" +
    "\002\000\004\036\073\001\002\000\004\033\066\001\002" +
    "\000\004\034\067\001\002\000\004\035\070\001\002\000" +
    "\004\036\071\001\002\000\030\005\uffe6\006\uffe6\007\uffe6" +
    "\010\063\011\uffe6\012\uffe6\013\uffe6\020\uffe6\021\uffe6\036" +
    "\uffe6\045\uffe6\001\002\000\026\005\uffe8\006\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\020\uffe8\021\uffe8\036\uffe8\045" +
    "\uffe8\001\002\000\026\005\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\020\uffe7\021\uffe7\036\uffe7\045\uffe7\001" +
    "\002\000\004\034\075\001\002\000\004\035\076\001\002" +
    "\000\030\005\023\006\016\007\017\011\022\012\025\013" +
    "\013\017\036\020\015\021\012\036\uffef\045\026\001\002" +
    "\000\004\036\100\001\002\000\026\005\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\020\ufff8\021\ufff8\036\ufff8" +
    "\045\ufff8\001\002\000\032\005\uffe3\006\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\020\uffe3\021\uffe3\027\103\036\uffe3" +
    "\041\031\045\uffe3\001\002\000\026\005\uffe2\006\uffe2\007" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\020\uffe2\021\uffe2\036\uffe2" +
    "\045\uffe2\001\002\000\030\005\uffe3\006\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\020\uffe3\021\uffe3\036\uffe3\041\031" +
    "\045\uffe3\001\002\000\026\005\uffe1\006\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\020\uffe1\021\uffe1\036\uffe1\045\uffe1" +
    "\001\002\000\006\002\ufffd\004\ufffd\001\002\000\004\014" +
    "\107\001\002\000\004\033\110\001\002\000\004\034\111" +
    "\001\002\000\030\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\020\uffe3\021\uffe3\036\uffe3\041\031\045\uffe3" +
    "\001\002\000\026\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\020\ufff5\021\ufff5\036\ufff5\045\ufff5\001\002" +
    "\000\004\034\114\001\002\000\004\035\115\001\002\000" +
    "\006\015\116\016\117\001\002\000\004\042\132\001\002" +
    "\000\010\044\124\045\126\046\125\001\002\000\004\036" +
    "\123\001\002\000\010\015\116\016\117\036\uffed\001\002" +
    "\000\004\036\uffee\001\002\000\026\005\ufff6\006\ufff6\007" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\020\ufff6\021\ufff6\036\ufff6" +
    "\045\ufff6\001\002\000\004\042\131\001\002\000\004\042" +
    "\130\001\002\000\004\042\127\001\002\000\010\015\uffeb" +
    "\016\uffeb\036\uffeb\001\002\000\010\015\uffea\016\uffea\036" +
    "\uffea\001\002\000\010\015\uffe9\016\uffe9\036\uffe9\001\002" +
    "\000\004\036\uffec\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\006\002\005\011\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\005\011\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\023\005" +
    "\013\013\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\023\005\041\013" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\023\005\034" +
    "\006\036\013\017\001\001\000\002\001\001\000\004\012" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\023\005\034\006" +
    "\043\013\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\023\005\034\006\057\013\017\001\001\000\002" +
    "\001\001\000\004\004\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\023\005\034\006" +
    "\076\013\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\101\001\001\000\002\001\001\000\004\012" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\120\010\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\120" +
    "\010\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {
  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARA ::= Variable Identificador Igual FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARA ::= Variable Identificador FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FINEXPRE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FINEXPRE ::= PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REQUIRE ::= Require ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("REQUIRE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= Else LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= Else If ParenA ParenC LlaveA LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASE ::= Case Numero DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASE ::= Case Char DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASE ::= Case Identificador DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASES ::= Default DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= Break FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Identificador Incremento FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= Llamada ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= Console Punto Log ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= Switch ParenA ParenC LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= Do LlaveA INSTRUCCIONES LlaveC While ParenA ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-7)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= While ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= If ParenA ParenC LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= Clase Identificador LlaveA SENTENCIAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= Clase Identificador LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIS ::= INI 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIS ::= INI INIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

