
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 01 14:36:40 CST 2021
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 01 14:36:40 CST 2021
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\011\004\000\002\011" +
    "\003\000\002\002\006\000\002\002\007\000\002\005\004" +
    "\000\002\005\003\000\002\003\010\000\002\003\011\000" +
    "\002\003\010\000\002\003\012\000\002\003\010\000\002" +
    "\003\010\000\002\003\006\000\002\006\003\000\002\006" +
    "\002\000\002\010\004\000\002\010\003\000\002\010\004" +
    "\000\002\007\005\000\002\007\005\000\002\004\011\000" +
    "\002\004\005\000\002\004\002\000\002\012\003\000\002" +
    "\012\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\004\005\001\002\000\004\002\116\001" +
    "\002\000\004\045\010\001\002\000\006\002\uffff\004\005" +
    "\001\002\000\004\002\000\001\002\000\004\035\011\001" +
    "\002\000\022\005\021\006\015\007\016\011\020\012\023" +
    "\013\014\021\012\036\017\001\002\000\004\033\100\001" +
    "\002\000\004\036\077\001\002\000\004\037\072\001\002" +
    "\000\004\033\065\001\002\000\004\033\046\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\033\042\001\002" +
    "\000\004\035\033\001\002\000\022\005\021\006\015\007" +
    "\016\011\020\012\023\013\014\021\012\036\ufffb\001\002" +
    "\000\004\033\024\001\002\000\004\034\025\001\002\000" +
    "\004\035\026\001\002\000\022\005\021\006\015\007\016" +
    "\011\020\012\023\013\014\021\012\036\ufff2\001\002\000" +
    "\004\036\ufff3\001\002\000\004\036\031\001\002\000\022" +
    "\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\021" +
    "\ufffa\036\ufffa\001\002\000\004\036\ufffc\001\002\000\022" +
    "\005\021\006\015\007\016\011\020\012\023\013\014\021" +
    "\012\036\ufff2\001\002\000\004\036\035\001\002\000\004" +
    "\006\036\001\002\000\004\033\037\001\002\000\004\034" +
    "\040\001\002\000\004\041\041\001\002\000\022\005\ufff7" +
    "\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\021\ufff7\036" +
    "\ufff7\001\002\000\004\034\043\001\002\000\024\005\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\021\uffe8\036" +
    "\uffe8\041\045\001\002\000\022\005\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\021\ufff4\036\ufff4\001\002\000" +
    "\022\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\021\uffe9\036\uffe9\001\002\000\004\034\047\001\002\000" +
    "\004\035\050\001\002\000\022\005\021\006\015\007\016" +
    "\011\020\012\023\013\014\021\012\036\ufff2\001\002\000" +
    "\004\036\052\001\002\000\024\005\uffea\006\uffea\007\uffea" +
    "\010\054\011\uffea\012\uffea\013\uffea\021\uffea\036\uffea\001" +
    "\002\000\022\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\021\ufff9\036\ufff9\001\002\000\006\007\056\035" +
    "\055\001\002\000\004\036\064\001\002\000\004\033\057" +
    "\001\002\000\004\034\060\001\002\000\004\035\061\001" +
    "\002\000\004\036\062\001\002\000\024\005\uffea\006\uffea" +
    "\007\uffea\010\054\011\uffea\012\uffea\013\uffea\021\uffea\036" +
    "\uffea\001\002\000\022\005\uffec\006\uffec\007\uffec\011\uffec" +
    "\012\uffec\013\uffec\021\uffec\036\uffec\001\002\000\022\005" +
    "\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\021\uffeb" +
    "\036\uffeb\001\002\000\004\034\066\001\002\000\004\035" +
    "\067\001\002\000\022\005\021\006\015\007\016\011\020" +
    "\012\023\013\014\021\012\036\ufff2\001\002\000\004\036" +
    "\071\001\002\000\022\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\021\ufff8\036\ufff8\001\002\000\004\014" +
    "\073\001\002\000\004\033\074\001\002\000\004\034\075" +
    "\001\002\000\024\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\021\uffe8\036\uffe8\041\045\001\002\000\022" +
    "\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\021" +
    "\ufff5\036\ufff5\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\034\101\001\002\000\004\035\102\001\002\000" +
    "\006\015\103\016\104\001\002\000\004\042\115\001\002" +
    "\000\006\044\111\045\112\001\002\000\004\036\110\001" +
    "\002\000\010\015\103\016\104\036\ufff0\001\002\000\004" +
    "\036\ufff1\001\002\000\022\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\021\ufff6\036\ufff6\001\002\000\004" +
    "\042\114\001\002\000\004\042\113\001\002\000\010\015" +
    "\uffee\016\uffee\036\uffee\001\002\000\010\015\uffed\016\uffed" +
    "\036\uffed\001\002\000\004\036\uffef\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\002\005\011\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\005\011\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\021\005" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\021" +
    "\005\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\021\005\026\006\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\021\005\026\006\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\021\005\026\006\050\001\001\000\002\001\001\000" +
    "\004\004\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\021\005\026\006\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\105\010\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\105\010\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {
  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FINEXPRE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FINEXPRE ::= PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELSE ::= Else LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELSE ::= Else If ParenA ParenC LlaveA LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASE ::= Case Numero DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASE ::= Case Identificador DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CASES ::= Default DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= Llamada ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= Console Punto Log ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= Switch ParenA ParenC LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= Do LlaveA INSTRUCCIONES LlaveC While ParenA ParenC PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-7)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= While ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= If ParenA ParenC LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= Clase Identificador LlaveA SENTENCIAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= Clase Identificador LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIS ::= INI 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIS ::= INI INIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

