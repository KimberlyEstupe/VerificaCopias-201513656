
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 02 22:50:38 CST 2021
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 02 22:50:38 CST 2021
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\007\000\002\005\004" +
    "\000\002\005\003\000\002\004\007\000\002\004\010\000" +
    "\002\004\007\000\002\004\011\000\002\004\010\000\002" +
    "\004\007\000\002\004\007\000\002\004\006\000\002\004" +
    "\003\000\002\004\005\000\002\004\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\002\000\002\017\005\000" +
    "\002\017\007\000\002\017\006\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\004\000\002\021" +
    "\004\000\002\021\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\013\011\000\002\013" +
    "\005\000\002\013\002\000\002\020\004\000\002\010\004" +
    "\000\002\010\005\000\002\016\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\004\004\005\001\002\000\004\002\164\001" +
    "\002\000\004\046\010\001\002\000\006\002\uffff\004\005" +
    "\001\002\000\004\002\000\001\002\000\004\036\011\001" +
    "\002\000\026\005\023\006\016\007\017\011\022\012\025" +
    "\013\015\020\014\021\012\037\021\046\027\001\002\000" +
    "\004\034\067\001\002\000\004\037\144\001\002\000\004" +
    "\046\137\001\002\000\004\040\133\001\002\000\004\034" +
    "\067\001\002\000\004\034\067\001\002\000\026\005\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\020\ufff2\021" +
    "\ufff2\037\ufff2\046\ufff2\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002\000\004\034\106\001\002\000\004\036\100\001" +
    "\002\000\026\005\023\006\016\007\017\011\022\012\025" +
    "\013\015\020\014\021\012\037\ufffb\046\027\001\002\000" +
    "\004\034\067\001\002\000\026\005\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\020\ufff0\021\ufff0\037\ufff0\046" +
    "\ufff0\001\002\000\010\030\032\032\031\034\030\001\002" +
    "\000\004\035\060\001\002\000\030\005\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\020\uffd2\021\uffd2\037\uffd2" +
    "\042\047\046\uffd2\001\002\000\020\024\036\027\037\033" +
    "\041\034\033\044\042\045\034\047\035\001\002\000\020" +
    "\024\036\027\037\033\041\034\033\044\042\045\034\047" +
    "\035\001\002\000\040\005\uffe3\006\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\035\uffe3\037\uffe3\042\uffe3\046\uffe3\001\002\000\040" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\020" +
    "\uffe1\021\uffe1\025\uffe1\026\uffe1\027\uffe1\035\uffe1\037\uffe1" +
    "\042\uffe1\046\uffe1\001\002\000\020\024\036\027\037\033" +
    "\041\034\033\044\042\045\034\047\035\001\002\000\020" +
    "\024\036\027\037\033\041\034\033\044\042\045\034\047" +
    "\035\001\002\000\036\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\020\uffd2\021\uffd2\025\046\026\045\027" +
    "\043\037\uffd2\042\047\046\uffd2\001\002\000\040\005\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\020\uffe0\021" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\035\uffe0\037\uffe0\042\uffe0" +
    "\046\uffe0\001\002\000\040\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\020\uffe2\021\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\035\uffe2\037\uffe2\042\uffe2\046\uffe2\001\002\000" +
    "\020\024\036\027\037\033\041\034\033\044\042\045\034" +
    "\047\035\001\002\000\026\005\uffea\006\uffea\007\uffea\011" +
    "\uffea\012\uffea\013\uffea\020\uffea\021\uffea\037\uffea\046\uffea" +
    "\001\002\000\020\024\036\027\037\033\041\034\033\044" +
    "\042\045\034\047\035\001\002\000\020\024\036\027\037" +
    "\033\041\034\033\044\042\045\034\047\035\001\002\000" +
    "\026\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\020\uffd3\021\uffd3\037\uffd3\046\uffd3\001\002\000\040\005" +
    "\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\020\uffe7" +
    "\021\uffe7\025\uffe7\026\045\027\043\035\uffe7\037\uffe7\042" +
    "\uffe7\046\uffe7\001\002\000\040\005\uffe9\006\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\020\uffe9\021\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\035\uffe9\037\uffe9\042\uffe9\046\uffe9\001\002" +
    "\000\040\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\020\uffe8\021\uffe8\025\uffe8\026\uffe8\027\uffe8\035\uffe8" +
    "\037\uffe8\042\uffe8\046\uffe8\001\002\000\040\005\uffe6\006" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\020\uffe6\021\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\035\uffe6\037\uffe6\042\uffe6\046" +
    "\uffe6\001\002\000\040\005\uffe5\006\uffe5\007\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\020\uffe5\021\uffe5\025\046\026\045\027" +
    "\043\035\uffe5\037\uffe5\042\uffe5\046\uffe5\001\002\000\012" +
    "\025\046\026\045\027\043\035\056\001\002\000\040\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\020\uffe4" +
    "\021\uffe4\025\uffe4\026\uffe4\027\uffe4\035\uffe4\037\uffe4\042" +
    "\uffe4\046\uffe4\001\002\000\026\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\020\ufff1\021\ufff1\037\ufff1\046" +
    "\ufff1\001\002\000\004\036\061\001\002\000\030\005\023" +
    "\006\016\007\017\011\022\012\025\013\015\017\062\020" +
    "\014\021\012\037\uffed\046\027\001\002\000\006\037\uffd2" +
    "\042\047\001\002\000\004\037\uffef\001\002\000\004\037" +
    "\065\001\002\000\026\005\ufff6\006\ufff6\007\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\020\ufff6\021\ufff6\037\ufff6\046\ufff6\001" +
    "\002\000\004\037\uffee\001\002\000\022\024\036\027\037" +
    "\033\041\034\033\035\074\044\042\045\034\047\035\001" +
    "\002\000\004\036\071\001\002\000\030\005\023\006\016" +
    "\007\017\011\022\012\025\013\015\017\062\020\014\021" +
    "\012\037\uffed\046\027\001\002\000\004\037\073\001\002" +
    "\000\026\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\020\ufffa\021\ufffa\037\ufffa\046\ufffa\001\002\000\032" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\020" +
    "\uffd5\021\uffd5\036\uffd5\037\uffd5\042\uffd5\046\uffd5\001\002" +
    "\000\012\025\046\026\045\027\043\035\076\001\002\000" +
    "\032\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\020\uffd4\021\uffd4\036\uffd4\037\uffd4\042\uffd4\046\uffd4\001" +
    "\002\000\004\037\ufffc\001\002\000\030\005\023\006\016" +
    "\007\017\011\022\012\025\013\015\017\062\020\014\021" +
    "\012\037\uffed\046\027\001\002\000\004\037\102\001\002" +
    "\000\004\006\103\001\002\000\004\034\067\001\002\000" +
    "\004\042\105\001\002\000\026\005\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\020\ufff7\021\ufff7\037\ufff7\046" +
    "\ufff7\001\002\000\004\035\107\001\002\000\030\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\020\uffd2\021" +
    "\uffd2\037\uffd2\042\047\046\uffd2\001\002\000\026\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\020\ufff3\021" +
    "\ufff3\037\ufff3\046\ufff3\001\002\000\004\036\112\001\002" +
    "\000\030\005\023\006\016\007\017\011\022\012\025\013" +
    "\015\017\062\020\014\021\012\037\uffed\046\027\001\002" +
    "\000\004\037\114\001\002\000\030\005\uffd7\006\uffd7\007" +
    "\uffd7\010\116\011\uffd7\012\uffd7\013\uffd7\020\uffd7\021\uffd7" +
    "\037\uffd7\046\uffd7\001\002\000\026\005\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\020\ufff9\021\ufff9\037\ufff9" +
    "\046\ufff9\001\002\000\006\007\120\036\117\001\002\000" +
    "\004\037\126\001\002\000\004\034\121\001\002\000\004" +
    "\035\122\001\002\000\004\036\123\001\002\000\004\037" +
    "\124\001\002\000\030\005\uffd7\006\uffd7\007\uffd7\010\116" +
    "\011\uffd7\012\uffd7\013\uffd7\020\uffd7\021\uffd7\037\uffd7\046" +
    "\uffd7\001\002\000\026\005\uffd9\006\uffd9\007\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\020\uffd9\021\uffd9\037\uffd9\046\uffd9\001" +
    "\002\000\026\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\020\uffd8\021\uffd8\037\uffd8\046\uffd8\001\002\000" +
    "\004\036\130\001\002\000\030\005\023\006\016\007\017" +
    "\011\022\012\025\013\015\017\062\020\014\021\012\037" +
    "\uffed\046\027\001\002\000\004\037\132\001\002\000\026" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\020" +
    "\ufff8\021\ufff8\037\ufff8\046\ufff8\001\002\000\004\014\134" +
    "\001\002\000\004\034\067\001\002\000\030\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\020\uffd2\021\uffd2" +
    "\037\uffd2\042\047\046\uffd2\001\002\000\026\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\020\ufff4\021\ufff4" +
    "\037\ufff4\046\ufff4\001\002\000\032\005\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\020\uffd2\021\uffd2\030\141" +
    "\037\uffd2\042\047\046\uffd2\001\002\000\026\005\uffec\006" +
    "\uffec\007\uffec\011\uffec\012\uffec\013\uffec\020\uffec\021\uffec" +
    "\037\uffec\046\uffec\001\002\000\020\024\036\027\037\033" +
    "\041\034\033\044\042\045\034\047\035\001\002\000\036" +
    "\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\020" +
    "\uffd2\021\uffd2\025\046\026\045\027\043\037\uffd2\042\047" +
    "\046\uffd2\001\002\000\026\005\uffeb\006\uffeb\007\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\020\uffeb\021\uffeb\037\uffeb\046\uffeb" +
    "\001\002\000\006\002\ufffd\004\ufffd\001\002\000\004\036" +
    "\146\001\002\000\006\015\147\016\150\001\002\000\004" +
    "\043\163\001\002\000\010\044\157\045\155\047\156\001" +
    "\002\000\004\037\154\001\002\000\010\015\147\016\150" +
    "\037\uffde\001\002\000\004\037\uffdf\001\002\000\026\005" +
    "\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\020\ufff5" +
    "\021\ufff5\037\ufff5\046\ufff5\001\002\000\004\043\162\001" +
    "\002\000\004\043\161\001\002\000\004\043\160\001\002" +
    "\000\010\015\uffdc\016\uffdc\037\uffdc\001\002\000\010\015" +
    "\uffdb\016\uffdb\037\uffdb\001\002\000\010\015\uffda\016\uffda" +
    "\037\uffda\001\002\000\004\037\uffdd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\003\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\023\005" +
    "\012\017\017\023\025\001\001\000\004\010\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\126\001\001\000\004\010\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\023\005\076\017\017\023\025\001\001" +
    "\000\004\010\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\056\001\001\000\004" +
    "\021\037\001\001\000\004\021\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\053\001\001\000\004" +
    "\021\052\001\001\000\004\016\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\051\001\001\000\002" +
    "\001\001\000\004\021\050\001\001\000\004\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\023\005\062\006\063\017\017\023" +
    "\025\001\001\000\004\016\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\074\001\001\000\002\001\001\000\014\004\023" +
    "\005\062\006\071\017\017\023\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\023\005" +
    "\062\006\100\017\017\023\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\023\005\062\006\112\017\017\023\025\001\001\000\002" +
    "\001\001\000\004\013\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\023\005\062\006\130\017\017\023" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\134\001\001\000\004\016\135\001" +
    "\001\000\002\001\001\000\004\016\137\001\001\000\002" +
    "\001\001\000\004\021\141\001\001\000\004\016\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\151\015\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\151\015\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println(s.value.toString());
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {
  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FINEXPRE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FINEXPRE ::= PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARENTESIS ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARENTESIS ::= ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REQUIRE ::= Require PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("REQUIRE",14, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= Else LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE ::= Else If ParenA ParenC LlaveA LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASE ::= Case Numero DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASE ::= Case Char DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASE ::= Case Cadena DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASES ::= Default DPuntos 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESIONES ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESIONES ::= Char 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESIONES ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESIONES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESIONES ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESIONES ::= Not EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESIONES ::= Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESIONES ::= EXPRESIONES Matematico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EXPRESIONES Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESIONES ::= EXPRESIONES Suma EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARA ::= Identificador Igual EXPRESIONES FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARA ::= Variable Identificador Igual EXPRESIONES FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARA ::= Variable Identificador FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= Break FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Identificador Incremento FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= Llamada ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= Console Punto Log PARENTESIS FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= Switch PARENTESIS LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= Identificador ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= Do LlaveA INSTRUCCIONES LlaveC While PARENTESIS PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= If PARENTESIS LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= For PARENTESIS LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= Clase Identificador LlaveA SENTENCIAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= Clase Identificador LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIS ::= INI 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIS ::= INI INIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

