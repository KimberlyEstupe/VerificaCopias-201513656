
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 05 01:27:45 CST 2021
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 05 01:27:45 CST 2021
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\007\000\002\003\004" +
    "\000\002\012\004\000\002\012\003\000\002\011\003\000" +
    "\002\011\003\000\002\033\007\000\002\033\006\000\002" +
    "\033\004\000\002\030\004\000\002\030\005\000\002\026" +
    "\004\000\002\026\003\000\002\025\004\000\002\025\003" +
    "\000\002\005\004\000\002\005\003\000\002\004\003\000" +
    "\002\004\011\000\002\004\007\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\036\006\000\002\036" +
    "\007\000\002\037\005\000\002\037\003\000\002\027\003" +
    "\000\002\027\005\000\002\034\003\000\002\034\010\000" +
    "\002\034\007\000\002\034\007\000\002\034\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\007" +
    "\003\000\002\022\005\000\002\022\007\000\002\022\006" +
    "\000\002\017\003\000\002\017\004\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\005\000\002\023\003" +
    "\000\002\020\010\000\002\020\015\000\002\032\003\000" +
    "\002\032\004\000\002\032\002\000\002\021\006\000\002" +
    "\021\005\000\002\015\004\000\002\015\003\000\002\015" +
    "\006\000\002\014\006\000\002\014\006\000\002\014\006" +
    "\000\002\013\011\000\002\013\006\000\002\013\002\000" +
    "\002\010\004\000\002\010\005\000\002\016\003\000\002" +
    "\016\002\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\003\004\004\006\001\002\000\004\037" +
    "\274\001\002\000\004\002\273\001\002\000\004\046\011" +
    "\001\002\000\010\002\uffff\003\004\004\006\001\002\000" +
    "\004\002\000\001\002\000\004\036\012\001\002\000\012" +
    "\003\015\020\017\037\013\046\021\001\002\000\010\002" +
    "\ufffe\003\ufffe\004\ufffe\001\002\000\012\003\ufff9\020\ufff9" +
    "\037\ufff9\046\ufff9\001\002\000\004\037\272\001\002\000" +
    "\012\003\015\020\017\037\ufffa\046\021\001\002\000\004" +
    "\046\264\001\002\000\012\003\ufff8\020\ufff8\037\ufff8\046" +
    "\ufff8\001\002\000\006\030\026\034\024\001\002\000\004" +
    "\037\023\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001" +
    "\002\000\010\035\260\041\254\046\257\001\002\000\004" +
    "\036\074\001\002\000\030\022\043\024\030\025\041\026" +
    "\036\027\044\033\035\034\027\044\031\045\042\046\040" +
    "\047\033\001\002\000\026\024\030\025\041\026\036\027" +
    "\044\033\035\034\027\044\031\045\042\046\040\047\033" +
    "\001\002\000\026\024\030\025\041\026\036\027\044\033" +
    "\035\034\027\044\031\045\042\046\040\047\033\001\002" +
    "\000\064\003\uffb1\005\uffb1\006\uffb1\007\uffb1\012\uffb1\013" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\031\uffb1\033\uffb1\035\uffb1\037" +
    "\uffb1\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\001\002\000\050\003\uffd4\005\uffd4\006\uffd4\007\uffd4\012" +
    "\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\023\047\025\052\026\051\027\050\031\046\037\uffd4\042" +
    "\uffd4\046\uffd4\001\002\000\064\003\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\023\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0" +
    "\033\uffb0\035\uffb0\037\uffb0\041\uffb0\042\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\001\002\000\036\003\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\037\uffb4\042\070\046\uffb4\001\002" +
    "\000\064\003\uffaf\005\uffaf\006\uffaf\007\uffaf\012\uffaf\013" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\031\uffaf\033\uffaf\035\uffaf\037" +
    "\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\001\002\000\026\024\030\025\041\026\036\027\044\033" +
    "\035\034\027\044\031\045\042\046\040\047\033\001\002" +
    "\000\052\003\uffc8\005\uffc8\006\uffc8\007\uffc8\012\uffc8\013" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\031\uffc8\035\uffc8\037\uffc8\042" +
    "\uffc8\046\uffc8\001\002\000\064\003\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2" +
    "\033\uffb2\035\uffb2\037\uffb2\041\uffb2\042\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\001\002\000\026\024\030\025\041" +
    "\026\036\027\044\033\035\034\027\044\031\045\042\046" +
    "\040\047\033\001\002\000\064\003\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\023\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3" +
    "\033\uffb3\035\uffb3\037\uffb3\041\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\001\002\000\004\034\060\001\002" +
    "\000\026\024\030\025\041\026\036\027\044\033\035\034" +
    "\027\044\031\045\042\046\040\047\033\001\002\000\052" +
    "\003\uffcc\005\uffcc\006\uffcc\007\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023\047\025\uffcc" +
    "\026\uffcc\027\uffcc\031\046\035\uffcc\037\uffcc\042\uffcc\046" +
    "\uffcc\001\002\000\026\024\030\025\041\026\036\027\044" +
    "\033\035\034\027\044\031\045\042\046\040\047\033\001" +
    "\002\000\026\024\030\025\041\026\036\027\044\033\035" +
    "\034\027\044\031\045\042\046\040\047\033\001\002\000" +
    "\026\024\030\025\041\026\036\027\044\033\035\034\027" +
    "\044\031\045\042\046\040\047\033\001\002\000\026\024" +
    "\030\025\041\026\036\027\044\033\035\034\027\044\031" +
    "\045\042\046\040\047\033\001\002\000\026\024\030\025" +
    "\041\026\036\027\044\033\035\034\027\044\031\045\042" +
    "\046\040\047\033\001\002\000\052\003\uffce\005\uffce\006" +
    "\uffce\007\uffce\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\023\047\025\uffce\026\051\027\050\031" +
    "\046\035\uffce\037\uffce\042\uffce\046\uffce\001\002\000\052" +
    "\003\uffd0\005\uffd0\006\uffd0\007\uffd0\012\uffd0\013\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\047\025\uffd0" +
    "\026\uffd0\027\uffd0\031\046\035\uffd0\037\uffd0\042\uffd0\046" +
    "\uffd0\001\002\000\052\003\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\023\047\025\uffcf\026\uffcf\027\uffcf\031\046\035\uffcf" +
    "\037\uffcf\042\uffcf\046\uffcf\001\002\000\052\003\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\031\046\035\uffd2\037\uffd2\042\uffd2\046\uffd2\001\002" +
    "\000\052\003\uffd1\005\uffd1\006\uffd1\007\uffd1\012\uffd1\013" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\031\046\035\uffd1\037\uffd1\042" +
    "\uffd1\046\uffd1\001\002\000\030\024\030\025\041\026\036" +
    "\027\044\033\035\034\027\035\062\044\031\045\042\046" +
    "\040\047\033\001\002\000\036\003\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\037\uffd3\042\uffd3\046\uffd3\001\002\000\040" +
    "\003\uffb7\005\uffb7\006\uffb7\007\uffb7\012\uffb7\013\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\036\uffb7\037\uffb7" +
    "\042\uffb7\046\uffb7\001\002\000\016\023\047\025\052\026" +
    "\051\027\050\031\046\035\064\001\002\000\040\003\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\012\uffb6\013\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\036\uffb6\037\uffb6\042\uffb6" +
    "\046\uffb6\001\002\000\052\003\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\023\047\025\uffcd\026\051\027\050\031\046\035" +
    "\uffcd\037\uffcd\042\uffcd\046\uffcd\001\002\000\052\003\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\012\uffcb\013\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\023\047\025\uffcb\026\uffcb" +
    "\027\uffcb\031\046\035\uffcb\037\uffcb\042\uffcb\046\uffcb\001" +
    "\002\000\034\003\uffd5\005\uffd5\006\uffd5\007\uffd5\012\uffd5" +
    "\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\037" +
    "\uffd5\046\uffd5\001\002\000\034\003\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\037\uffb5\046\uffb5\001\002\000\052\003\uffca" +
    "\005\uffca\006\uffca\007\uffca\012\uffca\013\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\023\047\025\052\026\051" +
    "\027\050\031\046\035\uffca\037\uffca\042\uffca\046\uffca\001" +
    "\002\000\016\023\047\025\052\026\051\027\050\031\046" +
    "\035\073\001\002\000\052\003\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\035" +
    "\uffc9\037\uffc9\042\uffc9\046\uffc9\001\002\000\026\003\112" +
    "\005\107\006\102\007\100\012\111\013\077\020\017\021" +
    "\075\037\105\046\113\001\002\000\004\034\060\001\002" +
    "\000\004\037\227\001\002\000\004\040\223\001\002\000" +
    "\004\034\060\001\002\000\034\003\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\037\uffe0\046\uffe0\001\002\000\004\034\060" +
    "\001\002\000\034\003\uffe8\005\uffe8\006\uffe8\007\uffe8\012" +
    "\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\037\uffe8\046\uffe8\001\002\000\034\003\uffec\005\uffec\006" +
    "\uffec\007\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\037\uffec\046\uffec\001\002\000\012\003" +
    "\ufff6\020\ufff6\037\ufff6\046\ufff6\001\002\000\034\003\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\037\uffe9\046\uffe9\001\002" +
    "\000\004\036\172\001\002\000\026\003\112\005\107\006" +
    "\102\007\100\012\111\013\077\020\017\021\075\037\uffed" +
    "\046\113\001\002\000\004\034\134\001\002\000\004\037" +
    "\133\001\002\000\010\030\026\032\115\034\114\001\002" +
    "\000\020\033\035\035\121\041\122\044\031\045\042\046" +
    "\040\047\033\001\002\000\036\003\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\037\uffb4\042\070\046\uffb4\001\002\000\034" +
    "\003\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\013\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\037\uffe7\046\uffe7" +
    "\001\002\000\004\035\131\001\002\000\004\035\uffe3\001" +
    "\002\000\036\003\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4" +
    "\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\037" +
    "\uffb4\042\070\046\uffb4\001\002\000\014\033\035\044\031" +
    "\045\042\046\040\047\033\001\002\000\022\026\124\033" +
    "\uffe2\035\uffe2\041\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\001\002\000\014\033\035\044\031\045\042\046\040\047" +
    "\033\001\002\000\020\033\uffe1\035\uffe1\041\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\001\002\000\016\033\035\041" +
    "\122\044\031\045\042\046\040\047\033\001\002\000\004" +
    "\035\uffe4\001\002\000\034\003\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\037\uffe6\046\uffe6\001\002\000\036\003\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\037\uffb4\042\070\046\uffb4\001" +
    "\002\000\034\003\uffe5\005\uffe5\006\uffe5\007\uffe5\012\uffe5" +
    "\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\037" +
    "\uffe5\046\uffe5\001\002\000\034\003\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\037\uffdc\046\uffdc\001\002\000\010\020\135" +
    "\035\140\046\137\001\002\000\004\046\166\001\002\000" +
    "\004\042\153\001\002\000\004\030\151\001\002\000\004" +
    "\036\141\001\002\000\026\003\112\005\107\006\102\007" +
    "\100\012\111\013\077\017\143\020\017\021\075\046\113" +
    "\001\002\000\034\003\112\005\107\006\102\007\100\012" +
    "\111\013\077\015\uffda\016\uffda\017\143\020\017\021\075" +
    "\037\uffda\046\113\001\002\000\012\015\uffb4\016\uffb4\037" +
    "\uffb4\042\070\001\002\000\034\003\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\037\uffd8\046\uffd8\001\002\000\004\037\146" +
    "\001\002\000\034\003\uffc7\005\uffc7\006\uffc7\007\uffc7\012" +
    "\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\037\uffc7\046\uffc7\001\002\000\010\015\uffd9\016\uffd9\037" +
    "\uffd9\001\002\000\010\015\uffdb\016\uffdb\037\uffdb\001\002" +
    "\000\026\024\030\025\041\026\036\027\044\033\035\034" +
    "\027\044\031\045\042\046\040\047\033\001\002\000\016" +
    "\023\047\025\052\026\051\027\050\031\046\042\uffc1\001" +
    "\002\000\026\024\030\025\041\026\036\027\044\033\035" +
    "\034\027\044\031\045\042\046\040\047\033\001\002\000" +
    "\016\023\047\025\052\026\051\027\050\031\046\042\155" +
    "\001\002\000\030\024\030\025\041\026\036\027\044\033" +
    "\035\034\027\035\uffc3\044\031\045\042\046\157\047\033" +
    "\001\002\000\016\023\047\025\052\026\051\027\050\031" +
    "\046\035\uffc5\001\002\000\020\023\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\031\uffb2\032\165\035\uffb2\001\002\000\004\035" +
    "\161\001\002\000\004\036\162\001\002\000\026\003\112" +
    "\005\107\006\102\007\100\012\111\013\077\017\143\020" +
    "\017\021\075\046\113\001\002\000\004\037\164\001\002" +
    "\000\034\003\uffc6\005\uffc6\006\uffc6\007\uffc6\012\uffc6\013" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\037\uffc6" +
    "\046\uffc6\001\002\000\004\035\uffc4\001\002\000\004\030" +
    "\167\001\002\000\026\024\030\025\041\026\036\027\044" +
    "\033\035\034\027\044\031\045\042\046\040\047\033\001" +
    "\002\000\016\023\047\025\052\026\051\027\050\031\046" +
    "\042\uffc2\001\002\000\004\037\uffee\001\002\000\026\003" +
    "\112\005\107\006\102\007\100\012\111\013\077\017\143" +
    "\020\017\021\075\046\113\001\002\000\004\037\174\001" +
    "\002\000\004\006\175\001\002\000\004\034\060\001\002" +
    "\000\004\042\177\001\002\000\034\003\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\037\uffeb\046\uffeb\001\002\000\004\036" +
    "\201\001\002\000\026\003\112\005\107\006\102\007\100" +
    "\012\111\013\077\017\143\020\017\021\075\046\113\001" +
    "\002\000\004\037\203\001\002\000\034\003\uffde\005\uffde" +
    "\006\uffde\007\uffde\012\uffde\013\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\037\uffde\046\uffde\001\002\000\004" +
    "\036\205\001\002\000\026\003\112\005\107\006\102\007" +
    "\100\012\111\013\077\017\143\020\017\021\075\046\113" +
    "\001\002\000\004\037\207\001\002\000\036\003\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\211\012\uffb8\013\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\037\uffb8\046\uffb8\001" +
    "\002\000\034\003\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf" +
    "\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\037" +
    "\uffdf\046\uffdf\001\002\000\006\007\213\036\212\001\002" +
    "\000\026\003\112\005\107\006\102\007\100\012\111\013" +
    "\077\017\143\020\017\021\075\046\113\001\002\000\004" +
    "\034\060\001\002\000\004\036\215\001\002\000\026\003" +
    "\112\005\107\006\102\007\100\012\111\013\077\017\143" +
    "\020\017\021\075\046\113\001\002\000\004\037\217\001" +
    "\002\000\036\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\211" +
    "\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\037\uffb8\046\uffb8\001\002\000\034\003\uffba\005\uffba" +
    "\006\uffba\007\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\037\uffba\046\uffba\001\002\000\004" +
    "\037\222\001\002\000\034\003\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\037\uffb9\046\uffb9\001\002\000\004\014\224\001" +
    "\002\000\004\034\060\001\002\000\036\003\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\037\uffb4\042\070\046\uffb4\001\002" +
    "\000\034\003\uffea\005\uffea\006\uffea\007\uffea\012\uffea\013" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\037\uffea" +
    "\046\uffea\001\002\000\012\003\ufff7\020\ufff7\037\ufff7\046" +
    "\ufff7\001\002\000\004\036\231\001\002\000\006\015\232" +
    "\016\233\001\002\000\004\043\251\001\002\000\010\044" +
    "\242\045\240\047\241\001\002\000\004\037\237\001\002" +
    "\000\010\015\232\016\233\037\uffbf\001\002\000\004\037" +
    "\uffc0\001\002\000\034\003\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\037\uffdd\046\uffdd\001\002\000\004\043\247\001\002" +
    "\000\004\043\245\001\002\000\004\043\243\001\002\000" +
    "\026\003\112\005\107\006\102\007\100\012\111\013\077" +
    "\017\143\020\017\021\075\046\113\001\002\000\010\015" +
    "\uffbd\016\uffbd\037\uffbd\001\002\000\026\003\112\005\107" +
    "\006\102\007\100\012\111\013\077\017\143\020\017\021" +
    "\075\046\113\001\002\000\010\015\uffbc\016\uffbc\037\uffbc" +
    "\001\002\000\026\003\112\005\107\006\102\007\100\012" +
    "\111\013\077\017\143\020\017\021\075\046\113\001\002" +
    "\000\010\015\uffbb\016\uffbb\037\uffbb\001\002\000\026\003" +
    "\112\005\107\006\102\007\100\012\111\013\077\017\143" +
    "\020\017\021\075\046\113\001\002\000\002\001\002\000" +
    "\004\037\uffbe\001\002\000\004\046\263\001\002\000\010" +
    "\035\ufff1\041\254\046\257\001\002\000\004\035\261\001" +
    "\002\000\010\035\uffef\041\uffef\046\uffef\001\002\000\004" +
    "\036\ufff4\001\002\000\004\036\ufff3\001\002\000\004\035" +
    "\ufff2\001\002\000\010\035\ufff0\041\ufff0\046\ufff0\001\002" +
    "\000\040\003\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4\013" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\030\266" +
    "\037\uffb4\042\070\046\uffb4\001\002\000\034\003\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\037\uffd7\046\uffd7\001\002\000" +
    "\030\022\043\024\030\025\041\026\036\027\044\033\035" +
    "\034\027\044\031\045\042\046\040\047\033\001\002\000" +
    "\036\003\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4\013\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\037\uffb4\042" +
    "\070\046\uffb4\001\002\000\034\003\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\037\uffd6\046\uffd6\001\002\000\004\037\ufffb" +
    "\001\002\000\012\003\ufff5\020\ufff5\037\ufff5\046\ufff5\001" +
    "\002\000\004\002\001\001\002\000\010\002\ufffc\003\ufffc" +
    "\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\007" +
    "\003\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\015\012\021\022\017\033\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\015\012\270\022\017\033\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\254\026\255\001\001" +
    "\000\002\001\001\000\010\017\033\023\031\035\036\001" +
    "\001\000\006\023\071\035\036\001\001\000\006\023\070" +
    "\035\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\066\001\001\000\002\001\001" +
    "\000\006\023\065\035\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\064\035\036\001\001\000\002" +
    "\001\001\000\004\010\060\001\001\000\006\023\044\035" +
    "\036\001\001\000\002\001\001\000\006\023\056\035\036" +
    "\001\001\000\006\023\055\035\036\001\001\000\006\023" +
    "\054\035\036\001\001\000\006\023\053\035\036\001\001" +
    "\000\006\023\052\035\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\062\035\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\107\005\075\020\100\022\102\034" +
    "\103\036\105\001\001\000\004\010\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\203\001\001\000" +
    "\002\001\001\000\004\010\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\107\005\170\020\100\022\102" +
    "\034\103\036\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\117\035\122\037\116" +
    "\001\001\000\004\016\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\127\001\001" +
    "\000\006\027\125\035\122\001\001\000\002\001\001\000" +
    "\004\035\124\001\001\000\002\001\001\000\010\027\117" +
    "\035\122\037\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\143\006\144\007\141\020\100\022\102\034\103\036" +
    "\105\001\001\000\020\004\143\006\147\007\141\020\100" +
    "\022\102\034\103\036\105\001\001\000\004\016\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\151\035" +
    "\036\001\001\000\002\001\001\000\006\023\153\035\036" +
    "\001\001\000\002\001\001\000\010\023\155\032\157\035" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\143\006\162\007" +
    "\141\020\100\022\102\034\103\036\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\167\035\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\143\006\172\007\141\020" +
    "\100\022\102\034\103\036\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\143" +
    "\006\201\007\141\020\100\022\102\034\103\036\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\143\006\205\007\141\020\100\022\102\034" +
    "\103\036\105\001\001\000\002\001\001\000\004\013\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\143\006\220\007\141\020\100\022\102\034\103\036\105" +
    "\001\001\000\004\010\213\001\001\000\002\001\001\000" +
    "\020\004\143\006\215\007\141\020\100\022\102\034\103" +
    "\036\105\001\001\000\002\001\001\000\004\013\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\224\001\001\000\004\016" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\234\015\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\234" +
    "\015\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\143\006\243\007\141\020\100\022\102\034\103\036" +
    "\105\001\001\000\002\001\001\000\020\004\143\006\245" +
    "\007\141\020\100\022\102\034\103\036\105\001\001\000" +
    "\002\001\001\000\020\004\143\006\247\007\141\020\100" +
    "\022\102\034\103\036\105\001\001\000\002\001\001\000" +
    "\020\004\143\006\251\007\141\020\100\022\102\034\103" +
    "\036\105\001\001\000\004\031\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\254\026\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\264\001\001\000\002\001\001\000\010\017\266\023" +
    "\031\035\036\001\001\000\004\016\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        int linea = s.right;
        int columna = s.left;
        String encontrado = s.value.toString();

        System.out.println(encontrado);
        FVentanaP.AddES(encontrado, "Sintactico", "archivo",linea,columna);//Lista de Reporte
    }

    public Symbol getS(){
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("MODO PANICO");

        int linea = s.right;
        int columna = s.left;
        String encontrado = s.value.toString();
        FVentanaP.AddES(encontrado, "Sintactico Panico", "archivo",linea,columna);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {
  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TERMINALESS ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TERMINALESS",27, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TERMINALESS ::= Char 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TERMINALESS",27, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINALESS ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TERMINALESS",27, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINALESS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TERMINALESS",27, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINALESS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TERMINALESS",27, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FINEXPRE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FINEXPRE ::= PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FINEXPRE",12, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARENTESIS ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARENTESIS ::= ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENTESIS",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE ::= Else LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE ::= Else If PARENTESIS LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASE ::= Case Numero DPuntos INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASE ::= Case Char DPuntos INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASE ::= Case Cadena DPuntos INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASES ::= Default DPuntos INSTRUCCIONES CASBREAK 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARAFOR ::= Identificador Igual EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARAFOR",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARAFOR ::= Variable Identificador Igual EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARAFOR",15, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ULTIDE ::= 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",24, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ULTIDE ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",24, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ULTIDE ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("ULTIDE",24, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For ParenA DECLARAFOR PComa EXPRESIONES PComa ULTIDE ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-10)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESIONES ::= TERMINALESS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESIONES ::= ParenA EXPRESIONES ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESIONES ::= Not EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESIONES ::= Suma EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONES ::= Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONES ::= Matematico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONES ::= EXPRESIONES Matematico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESIONES ::= EXPRESIONES Resta EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESIONES ::= EXPRESIONES Suma EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONES ::= EXPRESIONES Relacionales EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONES ::= EXPRESIONES Logico EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",17, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOD ::= Require PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOD",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOD ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOD",13, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARA ::= Identificador Igual TIPOD FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",16, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARA ::= Variable Identificador Igual TIPOD FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",16, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARA ::= Variable Identificador FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("DECLARA",16, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCIONES ::= Break FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CICLOSLLAVES ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CICLOSLLAVES",26, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CICLOSLLAVES ::= Switch PARENTESIS LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CICLOSLLAVES",26, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CICLOSLLAVES ::= While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CICLOSLLAVES",26, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CICLOSLLAVES ::= If PARENTESIS LlaveA INSTRUCCIONES LlaveC ELSE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CICLOSLLAVES",26, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-5)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLOSLLAVES ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("CICLOSLLAVES",26, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUMAS ::= TERMINALESS Suma TERMINALESS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SUMAS",21, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUMAS ::= TERMINALESS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SUMAS",21, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // P_LLAMADA ::= SUMAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("P_LLAMADA",29, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // P_LLAMADA ::= Coma SUMAS P_LLAMADA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("P_LLAMADA",29, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADA ::= Identificador ParenA P_LLAMADA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("LLAMADA",28, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADA ::= Identificador ParenA ParenC FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("LLAMADA",28, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= Identificador Incremento FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= Console Punto Log PARENTESIS FINEXPRE 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= Do LlaveA INSTRUCCIONES LlaveC While PARENTESIS PComa 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= CICLOSLLAVES 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETRO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETRO",19, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETRO ::= Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETRO",19, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= PARAMETRO PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARENMETODOS ::= ParenA PARAMETROS ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENMETODOS",22, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARENMETODOS ::= ParenA ParenC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("PARENMETODOS",22, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOMETODOS ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",25, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOMETODOS ::= Identificador PARENMETODOS LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",25, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOMETODOS ::= Identificador PARENMETODOS LlaveA SENTENCIAS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",25, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= TIPOMETODOS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODOS",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODOS ::= METODO METODOS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("METODOS",8, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INI ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= Clase Identificador LlaveA METODOS LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= Clase Identificador LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIS ::= INI 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIS ::= INI INIS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INIS",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

