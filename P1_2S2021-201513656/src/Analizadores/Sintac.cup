package Analizadores;
import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println(s.value.toString());
    }

    public Symbol getS(){
        return this.s;
    }
:};

//------------------------------------ TERMINALES -------------------------------------------------- 
/*viene del Lex*/
terminal Clase, Do, While, If, Else, Llamada, For, Console, Log,
        Default, Case, Break, Variable, Switch, Require,
        Logico, Not, Matematico, Suma, Resta, Igual, Relacionales, Incremento, Bool,
        ParenA, ParenC, LlaveA, LlaveC, Punto, Coma, PComa, DPuntos,
        Cadena, Numero, Identificador, Char;

//------------------------------------ NO TERMINALES -------------------------------------------------- 
/*Son creadas para cup*/
non terminal INIS, INI, SENTENCIA, SENTENCIAS, INSTRUCCIONES, INSTRUC, PARENTESIS, METODO, METODOS;
non terminal ELSE, CASE, CASES, FINEXPRE, TIPOD, FOR, DECLARAFOR;
non terminal DECLARA, EXPRESIONES, EXPRESION, PARAMETRO,PARAMETROS;
non terminal PARENMETODOS, CASBREAK, ULTIDE;


precedence right Incremento;
precedence right Not;
precedence left Matematico;
precedence left Suma, Resta;
precedence left Logico;
precedence right Relacionales;

start with INIS;
//------------------------------------ PRODUCIONES --------------------------------------------------
INIS::= INI INIS
| INI;

INI ::= 
    Clase Identificador LlaveA LlaveC   
    | Clase Identificador LlaveA METODOS LlaveC
;

METODOS::= METODO METODOS
    | METODO;

METODO::= Identificador PARENMETODOS LlaveA SENTENCIAS LlaveC
    | Identificador PARENMETODOS LlaveA  LlaveC
    | DECLARA;

PARENMETODOS::= ParenA ParenC
    | ParenA PARAMETROS ParenC;

PARAMETROS::= PARAMETRO PARAMETROS
    |PARAMETRO;

PARAMETRO::= Coma Identificador
    | Identificador 
   ;

SENTENCIAS::= SENTENCIA SENTENCIAS //Hace que vengan varias 
    | SENTENCIA;

SENTENCIA::=
      FOR
    | If PARENTESIS LlaveA INSTRUCCIONES LlaveC  ELSE
    | While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
    | Do LlaveA INSTRUCCIONES LlaveC  While PARENTESIS PComa
    | Switch PARENTESIS LlaveA CASES LlaveC
    | Console Punto Log PARENTESIS FINEXPRE                 
    | Identificador PARENMETODOS FINEXPRE                            //Llamada a parametros  
    | DECLARA
    | Identificador Incremento FINEXPRE
;

INSTRUCCIONES ::= SENTENCIAS
    | Break FINEXPRE
    | ;

DECLARA::= 
      Variable Identificador FINEXPRE 
    | Variable Identificador Igual  TIPOD FINEXPRE
    | Identificador Igual  TIPOD FINEXPRE
    ;

TIPOD::= EXPRESIONES
    | Require PARENTESIS; 

 EXPRESIONES::= 
    EXPRESIONES Logico EXPRESIONES
    | EXPRESIONES Relacionales EXPRESIONES
    | EXPRESIONES Suma EXPRESIONES
    | EXPRESIONES Resta EXPRESIONES
    | EXPRESIONES Matematico EXPRESIONES
    | Matematico EXPRESIONES
    | Resta EXPRESIONES
    | Suma EXPRESIONES
    | Not EXPRESIONES
    | ParenA EXPRESIONES ParenC
    /*-- terminales --*/
    | Numero  
    | Identificador
    | Cadena 
    | Char 
    | Bool 
     ;

/************* Produciones de sentencias **************/
FOR::= For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
    | For ParenA DECLARAFOR PComa EXPRESIONES PComa ULTIDE ParenC LlaveA INSTRUCCIONES LlaveC;

ULTIDE::= // Utilizada en el for
      EXPRESIONES FINEXPRE
    | Identificador Incremento FINEXPRE
    | DECLARAFOR
    |;

DECLARAFOR::= // Utilizada en el for
    Variable Identificador  
    | Variable Identificador Igual  EXPRESIONES 
    | Identificador Igual  EXPRESIONES 
    ;

CASES::=CASE CASES
    | CASE 
    | Default DPuntos INSTRUCCIONES CASBREAK
;

CASE::= Case Cadena DPuntos INSTRUCCIONES 
    | Case Char DPuntos INSTRUCCIONES 
    | Case Numero DPuntos INSTRUCCIONES 
;

ELSE ::= 
      Else If PARENTESIS LlaveA LlaveC ELSE
    | Else LlaveA LlaveC
    |   
;


/*********** PRODUCIONES REPETITIVAS************/
PARENTESIS::= ParenA ParenC
    | ParenA EXPRESIONES ParenC;

FINEXPRE::= PComa | ;