package Analizadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        int linea = s.right+1;
        int columna = s.left;
        String encontrado = s.value.toString();
        FVentanaP.AddES(encontrado, "Sintactico", "archivo",linea,columna);//Lista de Reporte
    }

    public Symbol getS(){
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        int linea = s.right;
        int columna = s.left;
        String encontrado = s.value.toString();
        FVentanaP.AddES(encontrado, "Sintactico Panico", "archivo",linea,columna);
    }
:};

//------------------------------------ TERMINALES -------------------------------------------------- 
/*viene del Lex*/
terminal Clase, Do, While, If, Else, Llamada, For, Console, Log,
        Default, Case, Break, Variable, Switch, Require,
        Logico, Not, Matematico, Suma, Resta, Igual, Relacionales, Incremento, Bool,
        ParenA, ParenC, LlaveA, LlaveC, Punto, Coma, PComa, DPuntos,
        Cadena, Numero, Identificador, Char;

//------------------------------------ NO TERMINALES -------------------------------------------------- 
/*Son creadas para cup*/
non terminal INIS, INI, SENTENCIA, SENTENCIAS, INSTRUCCIONES, INSTRUCCION, PARENTESIS, METODO, METODOS;
non terminal ELSE, CASE, CASES, FINEXPRE, TIPOD, FOR, DECLARAFOR;
non terminal DECLARA, EXPRESIONES, EXPRESION, PARAMETRO,PARAMETROS, SUMAS;
non terminal PARENMETODOS, CASBREAK, ULTIDE, TIPOMETODOS, CICLOSLLAVES, TERMINALESS,LLAMADA, P_LLAMADA;


precedence right Incremento;
precedence right Not;
precedence left Matematico;
precedence left Suma, Resta;
precedence left Logico;
precedence right Relacionales;

start with INIS;
//------------------------------------ PRODUCIONES --------------------------------------------------
INIS::= INI INIS
| INI;

INI ::= 
    Clase Identificador LlaveA LlaveC   
    | Clase Identificador LlaveA METODOS LlaveC
    | error LlaveC
;

METODOS::= METODO METODOS
    | METODO;

METODO::= TIPOMETODOS
    | DECLARA;
    
TIPOMETODOS::= Identificador PARENMETODOS LlaveA SENTENCIAS LlaveC
    | Identificador PARENMETODOS LlaveA  LlaveC
    | error LlaveC;

PARENMETODOS::= ParenA ParenC
    | ParenA PARAMETROS ParenC;

PARAMETROS::= PARAMETRO PARAMETROS
    |PARAMETRO;

PARAMETRO::= Coma Identificador
    | Identificador 
   ;

SENTENCIAS::= SENTENCIA SENTENCIAS //Hace que vengan varias 
    | SENTENCIA;

SENTENCIA::=
    CICLOSLLAVES
    | Do LlaveA INSTRUCCIONES LlaveC  While PARENTESIS PComa
    | Console Punto Log PARENTESIS FINEXPRE        
    | LLAMADA                           //Llamada a parametros  
    | DECLARA
    | Identificador Incremento FINEXPRE
;

LLAMADA::= Identificador ParenA ParenC FINEXPRE
    | Identificador ParenA P_LLAMADA ParenC FINEXPRE;

P_LLAMADA::= 
    Coma SUMAS P_LLAMADA
    | SUMAS;

SUMAS::= TERMINALESS
    | TERMINALESS Suma TERMINALESS;

CICLOSLLAVES::= 
      FOR
    | If PARENTESIS LlaveA INSTRUCCIONES LlaveC  ELSE
    | While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
    | Switch PARENTESIS LlaveA CASES LlaveC
    | error LlaveC;

INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
    | INSTRUCCION
    | Break FINEXPRE
     ;

INSTRUCCION::= SENTENCIA 
     ;

DECLARA::= 
      Variable Identificador FINEXPRE 
    | Variable Identificador Igual  TIPOD FINEXPRE
    | Identificador Igual  TIPOD FINEXPRE
    ;

TIPOD::= EXPRESIONES
    | Require PARENTESIS; 

 EXPRESIONES::= 
    EXPRESIONES Logico EXPRESIONES
    | EXPRESIONES Relacionales EXPRESIONES
    | EXPRESIONES Suma EXPRESIONES
    | EXPRESIONES Resta EXPRESIONES
    | EXPRESIONES Matematico EXPRESIONES
    | Matematico EXPRESIONES
    | Resta EXPRESIONES
    | Suma EXPRESIONES
    | Not EXPRESIONES
    | ParenA EXPRESIONES ParenC
    /*-- terminales --*/
    |TERMINALESS
     ;

/************* Produciones de sentencias **************/
FOR::= For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
    | For ParenA DECLARAFOR PComa EXPRESIONES PComa ULTIDE ParenC LlaveA INSTRUCCIONES LlaveC;

ULTIDE::= // Utilizada en el for
      EXPRESIONES 
    | Identificador Incremento 
    | ;

DECLARAFOR::= // Utilizada en el for
    Variable Identificador Igual  EXPRESIONES 
    | Identificador Igual  EXPRESIONES 
    ;

CASES::=CASE CASES
    | CASE 
    | Default DPuntos INSTRUCCIONES CASBREAK
;

CASE::= Case Cadena DPuntos INSTRUCCIONES 
    | Case Char DPuntos INSTRUCCIONES 
    | Case Numero DPuntos INSTRUCCIONES 
;

ELSE ::= 
      Else If PARENTESIS LlaveA INSTRUCCIONES LlaveC ELSE
    | Else LlaveA INSTRUCCIONES LlaveC
    |   
;


/*********** PRODUCIONES REPETITIVAS************/
PARENTESIS::= ParenA ParenC
    | ParenA EXPRESIONES ParenC;

FINEXPRE::= PComa | ;

TERMINALESS::=  Numero  
    | Identificador
    | Cadena 
    | Char 
    | Bool ;