package Analizadores;
import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

//------------------------------------ TERMINALES --------------------------------------------------
terminal Clase, Do, While, If, Else, Llamada, For, Console, Log,
        Default, Case, Break, Variable, Switch, Require,
        Logico, Matematico, Suma, Resta, Igual, Relacionales, Incremento, Bool,
        ParenA, ParenC, LlaveA, LlaveC, Punto, Coma, PComa, DPuntos,
        Cadena, Numero, Identificador, Char;

//------------------------------------ NO TERMINALES --------------------------------------------------
non terminal INI, SENTENCIA, ELSE, SENTENCIAS, INSTRUCCIONES, CASE, CASES, INIS, FINEXPRE,
        DECLARA, REQUIRE, INSTRUCCION;



start with INIS;
//------------------------------------ PRODUCIONES --------------------------------------------------
INIS::= INI INIS
| INI;

INI ::= 
    Clase Identificador LlaveA LlaveC
    | Clase Identificador LlaveA SENTENCIAS LlaveC
;

SENTENCIAS::= SENTENCIA SENTENCIAS
    | SENTENCIA;

SENTENCIA::=
      For ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
    | If ParenA ParenC LlaveA INSTRUCCIONES LlaveC  ELSE
    | While ParenA ParenC LlaveA INSTRUCCIONES LlaveC 
    | Do LlaveA INSTRUCCIONES LlaveC  While ParenA ParenC PComa
    | Switch ParenA ParenC LlaveA CASES LlaveC
    | Console Punto Log ParenA ParenC FINEXPRE
    | Llamada ParenA ParenC FINEXPRE   
    | DECLARA
    | Identificador Incremento FINEXPRE
;

INSTRUCCIONES ::= 
    SENTENCIAS
    |Break FINEXPRE
|;

CASES::=CASE CASES
    | CASE 
    | Default DPuntos
;

CASE::= Case Identificador DPuntos
    | Case Char DPuntos
    | Case Numero DPuntos
;

ELSE ::= 
      Else If ParenA ParenC LlaveA LlaveC ELSE
    | Else LlaveA LlaveC
    |   
;

REQUIRE::= Require ParenA ParenC ;

FINEXPRE::= PComa | ;

DECLARA::= 
    Variable Identificador FINEXPRE 
|   Variable Identificador Igual FINEXPRE ;
    

