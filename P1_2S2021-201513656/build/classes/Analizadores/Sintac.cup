package Analizadores;
import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println(s.value.toString());
    }

    public Symbol getS(){
        return this.s;
    }
:};

//------------------------------------ TERMINALES -------------------------------------------------- 
/*viene del Lex*/
terminal Clase, Do, While, If, Else, Llamada, For, Console, Log,
        Default, Case, Break, Variable, Switch, Require,
        Logico, Not, Matematico, Suma, Resta, Igual, Relacionales, Incremento, Bool,
        ParenA, ParenC, LlaveA, LlaveC, Punto, Coma, PComa, DPuntos,
        Cadena, Numero, Identificador, Char;

//------------------------------------ NO TERMINALES -------------------------------------------------- 
/*Son creadas para cup*/
non terminal INIS, INI, SENTENCIA, SENTENCIAS, INSTRUCCIONES, INSTRUC, PARENTESIS, METODO, METODOS;
non terminal ELSE, CASE, CASES, FINEXPRE;
non terminal DECLARA, REQUIRE, EXPRESIONES, EXPRESION, ASIGNACION;


precedence right Incremento;
precedence right Not;
precedence left Matematico;
precedence left Suma, Resta;
precedence left Logico;
precedence right Relacionales;

start with INIS;
//------------------------------------ PRODUCIONES --------------------------------------------------
INIS::= INI INIS
| INI;

INI ::= 
    Clase Identificador LlaveA LlaveC   
    | Clase Identificador LlaveA SENTENCIAS LlaveC
;


SENTENCIAS::= SENTENCIA SENTENCIAS
    | SENTENCIA;

SENTENCIA::=
      For PARENTESIS LlaveA INSTRUCCIONES LlaveC 
    | If PARENTESIS LlaveA INSTRUCCIONES LlaveC  ELSE
    | While PARENTESIS LlaveA INSTRUCCIONES LlaveC 
    | Do LlaveA INSTRUCCIONES LlaveC  While PARENTESIS PComa
    | Identificador ParenA ParenC LlaveA INSTRUCCIONES LlaveC
    | Switch PARENTESIS LlaveA CASES LlaveC
    | Console Punto Log PARENTESIS FINEXPRE
    | Llamada ParenA ParenC FINEXPRE   
    | DECLARA
    | Identificador Incremento FINEXPRE
    | ASIGNACION
;

INSTRUCCIONES ::= SENTENCIAS
    | Break FINEXPRE
    | ;


DECLARA::= 
    Variable Identificador FINEXPRE 
    | Variable Identificador Igual  EXPRESIONES FINEXPRE
    | Identificador Igual  EXPRESIONES FINEXPRE
    ;



 EXPRESIONES::= 
    EXPRESIONES Suma EXPRESIONES
    | EXPRESIONES Resta EXPRESIONES
    | EXPRESIONES Matematico EXPRESIONES
    | Resta EXPRESIONES
    | Not EXPRESIONES
    | ParenA EXPRESIONES ParenC
    /*-- terminales --*/
    | Numero  
    | Cadena 
    | Char 
    | Bool 
     ;

/************* Produciones de sentencias **************/
CASES::=CASE CASES
    | CASE 
    | Default DPuntos
;

CASE::= Case Cadena DPuntos
    | Case Char DPuntos
    | Case Numero DPuntos
;

ELSE ::= 
      Else If ParenA ParenC LlaveA LlaveC ELSE
    | Else LlaveA LlaveC
    |   
;

REQUIRE::= Require PARENTESIS ;

/*********** PRODUCIONES REPETITIVAS************/
PARENTESIS::= ParenA ParenC
    | ParenA EXPRESIONES ParenC;

FINEXPRE::= PComa | ;